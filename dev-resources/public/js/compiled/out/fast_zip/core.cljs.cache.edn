;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{remove replace next}, :name fast-zip.core, :imports nil, :requires nil, :uses nil, :defs {rightmost {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 167, :column 7, :end-line 167, :end-column 16, :arglists (quote ([loc])), :doc "Returns the loc of the rightmost sibling of the node at this loc, or self"}, :name fast-zip.core/rightmost, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 16, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the rightmost sibling of the node at this loc, or self"}, insert-child {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 246, :column 7, :end-line 246, :end-column 19, :arglists (quote ([loc item])), :doc "Inserts the item as the leftmost child of the node at this loc, without moving"}, :name fast-zip.core/insert-child, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 19, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the leftmost child of the node at this loc, without moving"}, left {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 183, :column 7, :end-line 183, :end-column 11, :arglists (quote ([loc])), :doc "Returns the loc of the left sibling of the node at this loc, or nil"}, :name fast-zip.core/left, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the left sibling of the node at this loc, or nil"}, path {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 93, :column 7, :end-line 93, :end-column 11, :arglists (quote ([loc])), :doc "Returns a seq of nodes leading to this loc"}, :name fast-zip.core/path, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of nodes leading to this loc"}, leftmost {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 198, :column 7, :end-line 198, :end-column 15, :arglists (quote ([loc])), :doc "Returns the loc of the leftmost sibling of the node at this loc, or self"}, :name fast-zip.core/leftmost, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 15, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the leftmost sibling of the node at this loc, or self"}, append-child {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 251, :column 7, :end-line 251, :end-column 19, :arglists (quote ([loc item])), :doc "Inserts the item as the rightmost child of the node at this loc, without moving"}, :name fast-zip.core/append-child, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 19, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the rightmost child of the node at this loc, without moving"}, ->ZipperOps {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 18, :column 10, :end-line 18, :end-column 19, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([branch? children make-node]))}, :protocols #{}, :name fast-zip.core/->ZipperOps, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 19, :method-params ([branch? children make-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([branch? children make-node])), :skip-protocol-flag nil}, branch? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 77, :column 7, :end-line 77, :end-column 14, :arglists (quote ([loc])), :doc "Returns true if the node at loc is a branch"}, :name fast-zip.core/branch?, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 14, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns true if the node at loc is a branch"}, children {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 82, :column 7, :end-line 82, :end-column 15, :arglists (quote ([loc])), :doc "Returns a seq of the children of node at loc, which must be a branch"}, :name fast-zip.core/children, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 15, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of the children of node at loc, which must be a branch"}, remove {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 287, :column 7, :end-line 287, :end-column 13, :arglists (quote ([loc])), :doc "Removes the node at loc, returning the loc that would have preceded it in a depth-first walk."}, :name fast-zip.core/remove, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 13, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Removes the node at loc, returning the loc that would have preceded it in a depth-first walk."}, down {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 108, :column 7, :end-line 108, :end-column 11, :arglists (quote ([loc])), :doc "Returns the loc of the leftmost child of the node at this loc,\n  or nil if no children"}, :name fast-zip.core/down, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the leftmost child of the node at this loc,\n  or nil if no children"}, ->ZipperLocation {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 22, :column 10, :end-line 22, :end-column 24, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([ops node path]))}, :protocols #{}, :name fast-zip.core/->ZipperLocation, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 24, :method-params ([ops node path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ops node path])), :skip-protocol-flag nil}, replace {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 237, :column 7, :end-line 237, :end-column 14, :arglists (quote ([loc node])), :doc "Replaces the node at this loc, without moving"}, :name fast-zip.core/replace, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 14, :method-params ([loc node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc node])), :doc "Replaces the node at this loc, without moving"}, zipper {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 24, :column 7, :end-line 24, :end-column 13, :arglists (quote ([branch? children make-node root])), :doc "Creates a new zipper structure.\n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.", :added "1.0"}, :added "1.0", :name fast-zip.core/zipper, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 13, :method-params ([branch? children make-node root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 4, :fn-var true, :arglists (quote ([branch? children make-node root])), :doc "Creates a new zipper structure.\n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."}, end? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 282, :column 7, :end-line 282, :end-column 11, :arglists (quote ([loc])), :doc "Returns true if loc represents the end of a depth-first walk"}, :name fast-zip.core/end?, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns true if loc represents the end of a depth-first walk"}, edit {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 306, :column 7, :end-line 306, :end-column 11, :arglists (quote ([loc f & args])), :doc "Replaces the node at this loc with the value of (f node args)", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(loc f args)], :arglists ([loc f & args]), :arglists-meta (nil)}}, :name fast-zip.core/edit, :variadic true, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(loc f args)], :arglists ([loc f & args]), :arglists-meta (nil)}, :method-params [(loc f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 306, :end-line 306, :max-fixed-arity 2, :fn-var true, :arglists ([loc f & args]), :doc "Replaces the node at this loc with the value of (f node args)"}, ->ZipperPath {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 20, :column 10, :end-line 20, :end-column 20, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([l r ppath pnodes changed?]))}, :protocols #{}, :name fast-zip.core/->ZipperPath, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 20, :method-params ([l r ppath pnodes changed?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 20, :end-line 20, :max-fixed-arity 5, :fn-var true, :arglists (quote ([l r ppath pnodes changed?])), :skip-protocol-flag nil}, make-node {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 87, :column 7, :end-line 87, :end-column 16, :arglists (quote ([loc node children])), :doc "Returns a new branch node, given an existing node and new children.\n  The loc is only used to supply the constructor."}, :name fast-zip.core/make-node, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 16, :method-params ([loc node children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 3, :fn-var true, :arglists (quote ([loc node children])), :doc "Returns a new branch node, given an existing node and new children.\n  The loc is only used to supply the constructor."}, vector-zip {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 50, :column 7, :end-line 50, :end-column 17, :arglists (quote ([root])), :doc "Returns a zipper for nested vectors, given a root vector", :added "1.0"}, :added "1.0", :name fast-zip.core/vector-zip, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 17, :method-params ([root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root])), :doc "Returns a zipper for nested vectors, given a root vector"}, node {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 72, :column 7, :end-line 72, :end-column 11, :arglists (quote ([loc])), :doc "Returns the node at loc"}, :name fast-zip.core/node, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the node at loc"}, up {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 125, :column 7, :end-line 125, :end-column 9, :arglists (quote ([loc])), :doc "Returns the loc of the parent of the node at this loc, or nil if at the top"}, :name fast-zip.core/up, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 9, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the parent of the node at this loc, or nil if at the top"}, insert-right {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 227, :column 7, :end-line 227, :end-column 19, :arglists (quote ([loc item])), :doc "Inserts the item as the right sibling of the node at this loc, without moving"}, :name fast-zip.core/insert-right, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 19, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the right sibling of the node at this loc, without moving"}, ZipperLocation {:num-fields 3, :protocols #{}, :name fast-zip.core/ZipperLocation, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 24, :type true, :column 10, :line 22, :record false, :end-line 22, :skip-protocol-flag nil}, rights {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 103, :column 7, :end-line 103, :end-column 13, :arglists (quote ([loc])), :doc "Returns a seq of the right siblings of this loc"}, :name fast-zip.core/rights, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 13, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of the right siblings of this loc"}, root {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 142, :column 7, :end-line 142, :end-column 11, :arglists (quote ([loc])), :doc "zips all the way up and returns the root node, reflecting any changes."}, :name fast-zip.core/root, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "zips all the way up and returns the root node, reflecting any changes."}, next {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 256, :column 7, :end-line 256, :end-column 11, :arglists (quote ([loc])), :doc "Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."}, :name fast-zip.core/next, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."}, ZipperOps {:num-fields 3, :protocols #{}, :name fast-zip.core/ZipperOps, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 19, :type true, :column 10, :line 18, :record false, :end-line 18, :skip-protocol-flag nil}, seq-zip {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 40, :column 7, :end-line 40, :end-column 14, :arglists (quote ([root])), :doc "Returns a zipper for nested sequences, given a root sequence", :added "1.0"}, :added "1.0", :name fast-zip.core/seq-zip, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 14, :method-params ([root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root])), :doc "Returns a zipper for nested sequences, given a root sequence"}, insert-left {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 217, :column 7, :end-line 217, :end-column 18, :arglists (quote ([loc item])), :doc "Inserts the item as the left sibling of the node at this loc, without moving"}, :name fast-zip.core/insert-left, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 18, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the left sibling of the node at this loc, without moving"}, prev {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 272, :column 7, :end-line 272, :end-column 11, :arglists (quote ([loc])), :doc "Moves to the previous loc in the hierarchy, depth-first. If already at the root, returns nil."}, :name fast-zip.core/prev, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Moves to the previous loc in the hierarchy, depth-first. If already at the root, returns nil."}, right {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 152, :column 7, :end-line 152, :end-column 12, :arglists (quote ([loc])), :doc "Returns the loc of the right sibling of the node at this loc, or nil"}, :name fast-zip.core/right, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 12, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the right sibling of the node at this loc, or nil"}, lefts {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 98, :column 7, :end-line 98, :end-column 12, :arglists (quote ([loc])), :doc "Returns a seq of the left siblings of this loc"}, :name fast-zip.core/lefts, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 12, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of the left siblings of this loc"}, ZipperPath {:num-fields 5, :protocols #{}, :name fast-zip.core/ZipperPath, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 20, :type true, :column 10, :line 20, :record false, :end-line 20, :skip-protocol-flag nil}, xml-zip {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/fast_zip/core.cljs", :line 60, :column 7, :end-line 60, :end-column 14, :arglists (quote ([root])), :doc "Returns a zipper for xml elements (as from xml/parse),\n  given a root element", :added "1.0"}, :added "1.0", :name fast-zip.core/xml-zip, :variadic false, :file "dev-resources/public/js/compiled/out/fast_zip/core.cljs", :end-column 14, :method-params ([root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root])), :doc "Returns a zipper for xml elements (as from xml/parse),\n  given a root element"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{path ppath :content branch? children r make-node node ops l :tag :end ZipperOps pnodes changed? ZipperPath}, :order [branch? children make-node l r ppath pnodes changed? ops :tag ZipperOps node path ZipperPath :content :end]}, :doc "Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet"}