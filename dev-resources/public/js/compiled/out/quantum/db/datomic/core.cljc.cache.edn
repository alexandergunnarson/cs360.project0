;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, whenf*n quantum.core.logic, doto->> quantum.core.function, try-times quantum.core.error, condfc quantum.core.logic, f*n quantum.core.function, coll-and quantum.core.logic, go cljs.core.async.macros, try+ quantum.core.error, fn-not quantum.core.logic, defcurried quantum.core.function, ifn quantum.core.logic, defalias quantum.core.ns, whencf*n quantum.core.logic, with-do quantum.core.function, <- quantum.core.function, whenc quantum.core.logic, go-loop cljs.core.async.macros, throw-when quantum.core.error, <? datomic-cljs.macros, ifp quantum.core.logic, assertf-> quantum.core.error, fn-or quantum.core.logic, if*n quantum.core.logic, fn-eq? quantum.core.logic, condf*n quantum.core.logic, ns-exclude quantum.core.ns, kmap quantum.core.collections.base, coll-or quantum.core.logic, assertf->> quantum.core.error, pr-attrs quantum.core.print, fn-and quantum.core.logic, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, throw+ quantum.core.error, source quantum.core.ns, condpc quantum.core.logic, fn= quantum.core.logic, assert quantum.core.error, throw-unless quantum.core.error, whenp quantum.core.logic, whenf quantum.core.logic, eq? quantum.core.logic, with-assert quantum.core.error, condf quantum.core.logic, fn->> quantum.core.function}, :excludes #{dissoc disj async conj update assoc}, :name quantum.db.datomic.core, :imports nil, :requires {quantum.core.collections quantum.core.collections, res quantum.core.resources, uuid cljs-uuid-utils.core, core-async cljs.core.async, clojure.core.rrb-vector clojure.core.rrb-vector, logic quantum.core.logic, pr quantum.core.print, log quantum.core.log, tpred quantum.core.type.predicates, cljs-uuid-utils.core cljs-uuid-utils.core, cljs.core cljs.core, fn quantum.core.function, fast-zip.core fast-zip.core, quantum.core.log quantum.core.log, cljs.core.async cljs.core.async, quantum.core.resources quantum.core.resources, datascript.core datascript.core, db datomic-cljs.api, mdb datascript.core, ns quantum.core.ns, quantum.core.logic quantum.core.logic, cbase quantum.core.collections.base, err quantum.core.error, com.stuartsierra.component com.stuartsierra.component, coll quantum.core.collections, component com.stuartsierra.component, quantum.core.print quantum.core.print, datomic-cljs.api datomic-cljs.api, c cljs.core, zip fast-zip.core, quantum.core.error quantum.core.error, quantum.core.collections.base quantum.core.collections.base, quantum.core.ns quantum.core.ns, core cljs.core, quantum.core.function quantum.core.function, quantum.core.type.predicates quantum.core.type.predicates}, :uses {AMap quantum.core.ns, juxtm quantum.core.function, ! quantum.core.print, juxt-kv quantum.core.function, <! cljs.core.async, any? quantum.core.logic, AArrList quantum.core.ns, boolean? quantum.core.type.predicates, atom? quantum.core.type.predicates, firsta quantum.core.function, *fn quantum.core.function, Err quantum.core.error, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, with-pr->> quantum.core.function, nnil? quantum.core.logic, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, splice-or quantum.core.logic, !* quantum.core.print, with-msg->> quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, >! cljs.core.async, AVec quantum.core.ns, derefable? quantum.core.type.predicates, ->ex quantum.core.error, ADecimal quantum.core.ns, alts! cljs.core.async, Exception quantum.core.ns, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, nempty? quantum.core.logic, ANum quantum.core.ns, ANil quantum.core.ns, unary quantum.core.function, seqable? quantum.core.type.predicates, withf->> quantum.core.function}, :defs {rename-schemas {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 287, :column 7, :end-line 287, :end-column 21, :arglists (quote ([mapping]))}, :name quantum.db.datomic.core/rename-schemas, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 21, :method-params ([mapping]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mapping]))}, partitions {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 261, :column 7, :end-line 261, :end-column 17, :arglists (quote ([] [db])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [db]), :arglists ([] [db]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/partitions, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [db]), :arglists ([] [db]), :arglists-meta (nil nil)}, :method-params ([] [db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 1, :fn-var true, :arglists ([] [db])}, dissoc {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 365, :column 7, :end-line 365, :end-column 13, :arglists (quote ([arg & args])), :doc "Transaction function which retracts the attributes (@kvs)\n   associated with entity id @id.\n\n   Unfortunately requires that one knows the values associated with keys.\n\n   '|Retract| with no value supplied is on our list of possible future\n    enhancements.' — Rich Hickey", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(arg args)], :arglists ([arg & args]), :arglists-meta (nil)}}, :name quantum.db.datomic.core/dissoc, :variadic true, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(arg args)], :arglists ([arg & args]), :arglists-meta (nil)}, :method-params [(arg args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 1, :fn-var true, :arglists ([arg & args]), :doc "Transaction function which retracts the attributes (@kvs)\n   associated with entity id @id.\n\n   Unfortunately requires that one knows the values associated with keys.\n\n   '|Retract| with no value supplied is on our list of possible future\n    enhancements.' — Rich Hickey"}, pull {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 139, :column 7, :end-line 139, :end-column 11, :arglists (quote ([selector eid] [db selector eid])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([selector eid] [db selector eid]), :arglists ([selector eid] [db selector eid]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/pull, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([selector eid] [db selector eid]), :arglists ([selector eid] [db selector eid]), :arglists-meta (nil nil)}, :method-params ([selector eid] [db selector eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 3, :fn-var true, :arglists ([selector eid] [db selector eid])}, attributes {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 248, :column 7, :end-line 248, :end-column 17, :arglists (quote ([] [db])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [db]), :arglists ([] [db]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/attributes, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [db]), :arglists ([] [db]), :arglists-meta (nil nil)}, :method-params ([] [db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists ([] [db])}, entity {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 115, :column 7, :end-line 115, :end-column 13, :arglists (quote ([eid] [db eid])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([eid] [db eid]), :arglists ([eid] [db eid]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/entity, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([eid] [db eid]), :arglists ([eid] [db eid]), :arglists-meta (nil nil)}, :method-params ([eid] [db eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists ([eid] [db eid])}, allowed-types {:name quantum.db.datomic.core/allowed-types, :file "src/cljc/quantum/db/datomic/core.cljc", :line 214, :column 1, :end-line 214, :end-column 19, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 214, :column 6, :end-line 214, :end-column 19}}, undo! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [db]), :arglists ([] [db]), :arglists-meta (nil nil)}, :column 7, :line 469, :from "https://gist.github.com/allgress/11348685", :contributors #{"Alex Gunnarson"}, :end-line 469, :arglists (quote ([] [db])), :doc "Performs undo on a DataScript database which has history."}, :name quantum.db.datomic.core/undo!, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [db]), :arglists ([] [db]), :arglists-meta (nil nil)}, :method-params ([] [db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 469, :from "https://gist.github.com/allgress/11348685", :contributors #{"Alex Gunnarson"}, :end-line 469, :max-fixed-arity 1, :fn-var true, :arglists ([] [db]), :doc "Performs undo on a DataScript database which has history."}, datoms {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 171, :column 7, :end-line 171, :end-column 13, :arglists (quote ([db index & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db index args)], :arglists ([db index & args]), :arglists-meta (nil)}}, :name quantum.db.datomic.core/datoms, :variadic true, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db index args)], :arglists ([db index & args]), :arglists-meta (nil)}, :method-params [(db index args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists ([db index & args])}, disj {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 399, :column 7, :end-line 399, :end-column 11, :arglists (quote ([eid] [conn eid])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([eid] [conn eid]), :arglists ([eid] [conn eid]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/disj, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([eid] [conn eid]), :arglists ([eid] [conn eid]), :arglists-meta (nil nil)}, :method-params ([eid] [conn eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 2, :fn-var true, :arglists ([eid] [conn eid])}, is-filtered {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 154, :column 7, :end-line 154, :end-column 18, :arglists (quote ([] [db])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [db]), :arglists ([] [db]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/is-filtered, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [db]), :arglists ([] [db]), :arglists-meta (nil nil)}, :method-params ([] [db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists ([] [db])}, q {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 108, :column 7, :end-line 108, :end-column 8, :arglists (quote ([query] [query db & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([query]), :arglists ([query] [query db & args]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/q, :variadic true, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([query]), :arglists ([query] [query db & args]), :arglists-meta (nil nil)}, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 2, :fn-var true, :arglists ([query] [query db & args])}, index-range {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 185, :column 7, :end-line 185, :end-column 18, :arglists (quote ([attr start end] [db attr start end])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([attr start end] [db attr start end]), :arglists ([attr start end] [db attr start end]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/index-range, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([attr start end] [db attr start end]), :arglists ([attr start end] [db attr start end]), :arglists-meta (nil nil)}, :method-params ([attr start end] [db attr start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 4, :fn-var true, :arglists ([attr start end] [db attr start end])}, mentity? {:name quantum.db.datomic.core/mentity?, :file "src/cljc/quantum/db/datomic/core.cljc", :line 54, :column 1, :end-line 54, :end-column 19, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 54, :column 11, :end-line 54, :end-column 19}}, pull-many {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 147, :column 7, :end-line 147, :end-column 16, :arglists (quote ([selector eids] [db selector eids])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([selector eids] [db selector eids]), :arglists ([selector eids] [db selector eids]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/pull-many, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([selector eids] [db selector eids]), :arglists ([selector eids] [db selector eids]), :arglists-meta (nil nil)}, :method-params ([selector eids] [db selector eids]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 3, :fn-var true, :arglists ([selector eids] [db selector eids])}, ->db {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 87, :column 7, :end-line 87, :end-column 11, :arglists (quote ([] [arg])), :doc "Arity 0: Tries to find a database object in the global variables.\n   Arity 1: Tries to coerce @arg to a database-like object", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [arg]), :arglists ([] [arg]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/->db, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [arg]), :arglists ([] [arg]), :arglists-meta (nil nil)}, :method-params ([] [arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists ([] [arg]), :doc "Arity 0: Tries to find a database object in the global variables.\n   Arity 1: Tries to coerce @arg to a database-like object"}, conj {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 392, :column 7, :end-line 392, :end-column 11, :arglists (quote ([m] [part m] [conn part m])), :doc "Creates an entity from the supplied attribute-map.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m] [part m] [conn part m]), :arglists ([m] [part m] [conn part m]), :arglists-meta (nil nil nil)}}, :name quantum.db.datomic.core/conj, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m] [part m] [conn part m]), :arglists ([m] [part m] [conn part m]), :arglists-meta (nil nil nil)}, :method-params ([m] [part m] [conn part m]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 3, :fn-var true, :arglists ([m] [part m] [conn part m]), :doc "Creates an entity from the supplied attribute-map."}, recommended-txn-ct {:name quantum.db.datomic.core/recommended-txn-ct, :file "src/cljc/quantum/db/datomic/core.cljc", :line 436, :column 1, :end-line 438, :end-column 21, :according-to "http://docs.datomic.com/best-practices.html#pipeline-transactions", :const true, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 438, :column 3, :end-line 438, :end-column 21, :according-to "http://docs.datomic.com/best-practices.html#pipeline-transactions", :const true}}, excise {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 384, :column 7, :end-line 384, :end-column 13, :arglists (quote ([eid attrs] [eid part attrs] [conn eid part attrs])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([eid attrs] [eid part attrs] [conn eid part attrs]), :arglists ([eid attrs] [eid part attrs] [conn eid part attrs]), :arglists-meta (nil nil nil)}}, :name quantum.db.datomic.core/excise, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([eid attrs] [eid part attrs] [conn eid part attrs]), :arglists ([eid attrs] [eid part attrs] [conn eid part attrs]), :arglists-meta (nil nil nil)}, :method-params ([eid attrs] [eid part attrs] [conn eid part attrs]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 384, :end-line 384, :max-fixed-arity 4, :fn-var true, :arglists ([eid attrs] [eid part attrs] [conn eid part attrs])}, partitions-ex {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 256, :column 7, :end-line 256, :end-column 20, :arglists (quote ([]))}, :name quantum.db.datomic.core/partitions-ex, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, db? {:name quantum.db.datomic.core/db?, :file "src/cljc/quantum/db/datomic/core.cljc", :line 56, :column 1, :end-line 56, :end-column 9, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 56, :column 6, :end-line 56, :end-column 9}}, db->seq {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 68, :column 7, :end-line 68, :end-column 14, :arglists (quote ([db])), :todo ["Add for db"]}, :name quantum.db.datomic.core/db->seq, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 14, :method-params ([db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :todo ["Add for db"], :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([db]))}, conn* {:name quantum.db.datomic.core/conn*, :file "src/cljc/quantum/db/datomic/core.cljc", :line 36, :column 1, :end-line 36, :end-column 15, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 36, :column 10, :end-line 36, :end-column 15}}, entity-db {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 122, :column 7, :end-line 122, :end-column 16, :arglists (quote ([entity]))}, :name quantum.db.datomic.core/entity-db, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 16, :method-params ([entity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([entity]))}, part* {:name quantum.db.datomic.core/part*, :file "src/cljc/quantum/db/datomic/core.cljc", :line 37, :column 1, :end-line 37, :end-column 15, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 37, :column 10, :end-line 37, :end-column 15}}, mconn? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 64, :column 7, :end-line 64, :end-column 13, :arglists (quote ([x]))}, :name quantum.db.datomic.core/mconn?, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, mdb? {:name quantum.db.datomic.core/mdb?, :file "src/cljc/quantum/db/datomic/core.cljc", :line 59, :column 1, :end-line 60, :end-column 7, :doc "'mdb' because checks if it is an in-*mem*ory database.", :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 60, :column 3, :end-line 60, :end-column 7, :doc "'mdb' because checks if it is an in-*mem*ory database."}}, ->schema {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 291, :column 7, :end-line 291, :end-column 15, :arglists (quote ([ident val-type cardinality] [ident val-type cardinality {:keys [conn part], :as opts}])), :doc "Defines, but does not transact, a new database schema.\n   Takes the pain out of schema creation.", :usage (quote (->schema :person.name/family-name :string :one {:doc "nodoc"})), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ident val-type cardinality] [ident val-type cardinality {:keys [conn part], :as opts}]), :arglists ([ident val-type cardinality] [ident val-type cardinality {:keys [conn part], :as opts}]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/->schema, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ident val-type cardinality] [ident val-type cardinality {:keys [conn part], :as opts}]), :arglists ([ident val-type cardinality] [ident val-type cardinality {:keys [conn part], :as opts}]), :arglists-meta (nil nil)}, :method-params ([ident val-type cardinality] [ident val-type cardinality {:keys [conn part], :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :usage (quote (->schema :person.name/family-name :string :one {:doc "nodoc"})), :line 291, :end-line 291, :max-fixed-arity 4, :fn-var true, :arglists ([ident val-type cardinality] [ident val-type cardinality {:keys [conn part], :as opts}]), :doc "Defines, but does not transact, a new database schema.\n   Takes the pain out of schema creation."}, update {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 404, :column 7, :end-line 404, :end-column 13, :arglists (quote ([eid k f] [conn eid k f])), :doc "TODO currently not an atomic operation.\n   Use database functions to achieve atomicity.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([eid k f] [conn eid k f]), :arglists ([eid k f] [conn eid k f]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/update, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([eid k f] [conn eid k f]), :arglists ([eid k f] [conn eid k f]), :arglists-meta (nil nil)}, :method-params ([eid k f] [conn eid k f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 4, :fn-var true, :arglists ([eid k f] [conn eid k f]), :doc "TODO currently not an atomic operation.\n   Use database functions to achieve atomicity."}, rename {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 355, :column 7, :end-line 355, :end-column 13, :arglists (quote ([old new-]))}, :name quantum.db.datomic.core/rename, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 13, :method-params ([old new-]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 2, :fn-var true, :arglists (quote ([old new-]))}, db* {:name quantum.db.datomic.core/db*, :file "src/cljc/quantum/db/datomic/core.cljc", :line 35, :column 1, :end-line 35, :end-column 13, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 35, :column 10, :end-line 35, :end-column 13}}, transact! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 192, :column 7, :end-line 192, :end-column 16, :arglists (quote ([tx-data] [conn tx-data] [conn tx-data tx-meta])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tx-data] [conn tx-data] [conn tx-data tx-meta]), :arglists ([tx-data] [conn tx-data] [conn tx-data tx-meta]), :arglists-meta (nil nil nil)}}, :name quantum.db.datomic.core/transact!, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tx-data] [conn tx-data] [conn tx-data tx-meta]), :arglists ([tx-data] [conn tx-data] [conn tx-data tx-meta]), :arglists-meta (nil nil nil)}, :method-params ([tx-data] [conn tx-data] [conn tx-data tx-meta]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 3, :fn-var true, :arglists ([tx-data] [conn tx-data] [conn tx-data tx-meta])}, ->partition {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 275, :column 7, :end-line 275, :end-column 18, :arglists (quote ([part] [conn part])), :doc "Defines a database partition.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([part] [conn part]), :arglists ([part] [conn part]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/->partition, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([part] [conn part]), :arglists ([part] [conn part]), :arglists-meta (nil nil)}, :method-params ([part] [conn part]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 275, :end-line 275, :max-fixed-arity 2, :fn-var true, :arglists ([part] [conn part]), :doc "Defines a database partition."}, block->schemas {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 329, :column 7, :end-line 329, :end-column 21, :arglists (quote ([block])), :doc "Transforms a schema-block @block into a vector of individual schemas.", :usage (quote (block->schemas {:todo/text [:string :one], :todo/completed? [:boolean :one {:index? true}], :todo/id [:long :one {:index? true}]}))}, :name quantum.db.datomic.core/block->schemas, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 21, :method-params ([block]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :usage (quote (block->schemas {:todo/text [:string :one], :todo/completed? [:boolean :one {:index? true}], :todo/id [:long :one {:index? true}]})), :line 329, :end-line 329, :max-fixed-arity 1, :fn-var true, :arglists (quote ([block])), :doc "Transforms a schema-block @block into a vector of individual schemas."}, seek-datoms {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 178, :column 7, :end-line 178, :end-column 18, :arglists (quote ([db index & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db index args)], :arglists ([db index & args]), :arglists-meta (nil)}}, :name quantum.db.datomic.core/seek-datoms, :variadic true, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db index args)], :arglists ([db index & args]), :arglists-meta (nil)}, :method-params [(db index args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists ([db index & args])}, conn? {:name quantum.db.datomic.core/conn?, :file "src/cljc/quantum/db/datomic/core.cljc", :line 62, :column 1, :end-line 62, :end-column 11, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 62, :column 6, :end-line 62, :end-column 11}}, schemas {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 241, :column 7, :end-line 241, :end-column 14, :arglists (quote ([] [db])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [db]), :arglists ([] [db]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/schemas, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [db]), :arglists ([] [db]), :arglists-meta (nil nil)}, :method-params ([] [db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 1, :fn-var true, :arglists ([] [db])}, with {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 163, :column 7, :end-line 163, :end-column 11, :arglists (quote ([tx-data] [db tx-data] [db tx-data tx-meta])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tx-data] [db tx-data] [db tx-data tx-meta]), :arglists ([tx-data] [db tx-data] [db tx-data tx-meta]), :arglists-meta (nil nil nil)}}, :name quantum.db.datomic.core/with, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tx-data] [db tx-data] [db tx-data tx-meta]), :arglists ([tx-data] [db tx-data] [db tx-data tx-meta]), :arglists-meta (nil nil nil)}, :method-params ([tx-data] [db tx-data] [db tx-data tx-meta]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 3, :fn-var true, :arglists ([tx-data] [db tx-data] [db tx-data tx-meta])}, add-schemas! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 339, :column 7, :end-line 339, :end-column 19, :arglists (quote ([schemas] [conn schemas])), :doc "This function exists mainly because schema implementation differs from Datomic\n   to DataScript.\n\n   @schemas should be a vector of schema.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([schemas] [conn schemas]), :arglists ([schemas] [conn schemas]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/add-schemas!, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([schemas] [conn schemas]), :arglists ([schemas] [conn schemas]), :arglists-meta (nil nil)}, :method-params ([schemas] [conn schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 339, :end-line 339, :max-fixed-arity 2, :fn-var true, :arglists ([schemas] [conn schemas]), :doc "This function exists mainly because schema implementation differs from Datomic\n   to DataScript.\n\n   @schemas should be a vector of schema."}, unhandled-type {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 39, :column 7, :end-line 39, :end-column 21, :arglists (quote ([type obj]))}, :name quantum.db.datomic.core/unhandled-type, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 21, :method-params ([type obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type obj]))}, touch {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 103, :column 7, :end-line 103, :end-column 12, :arglists (quote ([entity]))}, :name quantum.db.datomic.core/touch, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 12, :method-params ([entity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([entity]))}, assoc {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 359, :column 7, :end-line 359, :end-column 12, :arglists (quote ([eid & kvs])), :doc "Transaction function which asserts the attributes (@kvs)\n   associated with entity id @id.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(eid kvs)], :arglists ([eid & kvs]), :arglists-meta (nil)}}, :name quantum.db.datomic.core/assoc, :variadic true, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(eid kvs)], :arglists ([eid & kvs]), :arglists-meta (nil)}, :method-params [(eid kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 1, :fn-var true, :arglists ([eid & kvs]), :doc "Transaction function which asserts the attributes (@kvs)\n   associated with entity id @id."}, history->seq {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 80, :column 7, :end-line 80, :end-column 19, :arglists (quote ([history])), :doc "Assumes @history is a seq of DataScript DBs."}, :name quantum.db.datomic.core/history->seq, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 19, :method-params ([history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([history])), :doc "Assumes @history is a seq of DataScript DBs."}, tempid {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 131, :column 7, :end-line 131, :end-column 13, :arglists (quote ([part] [conn part])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([part] [conn part]), :arglists ([part] [conn part]), :arglists-meta (nil nil)}}, :name quantum.db.datomic.core/tempid, :variadic false, :file "src/cljc/quantum/db/datomic/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([part] [conn part]), :arglists ([part] [conn part]), :arglists-meta (nil nil)}, :method-params ([part] [conn part]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists ([part] [conn part])}, filtered? {:name quantum.db.datomic.core/filtered?, :file "src/cljc/quantum/db/datomic/core.cljc", :line 161, :column 1, :end-line 161, :end-column 20, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/db/datomic/core.cljc", :line 161, :column 11, :end-line 161, :end-column 20}}}, :require-macros {logic quantum.core.logic, cljs.core.async.macros cljs.core.async.macros, pr quantum.core.print, log quantum.core.log, datomic-cljs.macros datomic-cljs.macros, fn quantum.core.function, quantum.core.log quantum.core.log, ns quantum.core.ns, quantum.core.logic quantum.core.logic, err quantum.core.error, quantum.core.print quantum.core.print, asyncm cljs.core.async.macros, quantum.core.error quantum.core.error, quantum.core.collections.base quantum.core.collections.base, quantum.core.ns quantum.core.ns, quantum.core.function quantum.core.function}, :cljs.analyzer/constants {:seen #{:one x :find :db/excise :schema :unique :db/index :long :double :where :v :db/unique :ephemeral conn-f :instant :db.part/db :else :db-after :ref :bigint :db is-filtered :added :float :ns :db/valueType :name mentity? datascript.impl.entity/entity? :variadic :not-supported :part :file :end-column :top-fn :history part-f :debug :method-params db :db.install/_attribute :string _ :e :arglists-meta :db/fulltext :db.fn/retractEntity :column :db-before :tx-data entity? :db/retract :full-text? quantum.db.datomic.core/mentity? :tx :line history :keyword :macro :bigdec :db/cardinality :db/doc :db/id :end-line :db/ident :assertion-error :bytes quantum.db.datomic.core/is-filtered ?ident :max-fixed-arity :t :db/add :unrecognized-cardinality :uri val-type :uuid quantum.db.datomic.core/filtered? :unhandled-predicate :db.cardinality/many :arglists ... :doc :entity :db.install/partition :many :boolean :listeners quantum.db.datomic.core :test ?e :db.install/attribute :db.cardinality/one :db.excise/attrs :a :index? filtered? :conn datascript.impl.entity}, :order [:conn :unhandled-predicate :db :entity datascript.impl.entity/entity? :ns :name :file :end-column :column :line :end-line :arglists :doc :test datascript.impl.entity entity? x :macro quantum.db.datomic.core/mentity? quantum.db.datomic.core mentity? :e :a :v :tx :added :else quantum.db.datomic.core/is-filtered :top-fn is-filtered :variadic :max-fixed-arity :method-params :arglists-meta db quantum.db.datomic.core/filtered? filtered? :long :double :instant :ref :bigint :float :string :keyword :bigdec :bytes :uri :uuid :boolean :find ?ident ... :where _ :db/ident ?e :db.install/attribute :not-supported :db.install/partition :db.part/db :db/id :db/add :part :assertion-error val-type conn-f part-f :one :db.cardinality/one :many :db.cardinality/many :unrecognized-cardinality :db/index :db/unique :db/valueType :db.install/_attribute :db/fulltext :db/cardinality :db/doc :index? :unique :full-text? :schema :debug :db.fn/retractEntity :db/retract :db/excise :db.excise/attrs :history :ephemeral history :db-before :db-after :tx-data :t :listeners]}, :doc "The core Datomic (and friends, e.g. DataScript) namespace"}