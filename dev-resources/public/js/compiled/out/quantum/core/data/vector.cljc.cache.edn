;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, defalias quantum.core.ns, ns-exclude quantum.core.ns, defonce quantum.core.ns, source quantum.core.ns}, :excludes #{defonce}, :name quantum.core.data.vector, :imports nil, :requires {vec+ clojure.core.rrb-vector, clojure.core.rrb-vector clojure.core.rrb-vector, ns quantum.core.ns, quantum.core.ns quantum.core.ns, core cljs.core, cljs.core cljs.core}, :uses {AMap quantum.core.ns, AArrList quantum.core.ns, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, ALSeq quantum.core.ns, ARegex quantum.core.ns, AExactNum quantum.core.ns, AEditable quantum.core.ns, AKey quantum.core.ns, AQueue quantum.core.ns, AError quantum.core.ns, ADouble quantum.core.ns, AVec quantum.core.ns, ADecimal quantum.core.ns, Exception quantum.core.ns, AInt quantum.core.ns, ATransient quantum.core.ns, ANum quantum.core.ns, ANil quantum.core.ns}, :defs {vec+ {:name quantum.core.data.vector/vec+, :file "src/cljc/quantum/core/data/vector.cljc", :line 54, :column 1, :end-line 54, :end-column 10, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/vector.cljc", :line 54, :column 6, :end-line 54, :end-column 10}}, vector+ {:name quantum.core.data.vector/vector+, :file "src/cljc/quantum/core/data/vector.cljc", :line 55, :column 1, :end-line 55, :end-column 13, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/vector.cljc", :line 55, :column 6, :end-line 55, :end-column 13}}, catvec {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/vector.cljc", :line 58, :column 7, :end-line 58, :end-column 13, :arglists (quote ([a] [a b] [a b c] [a b c d] [a b c d e] [a b c d e f] [a b c d e f & more])), :doc "|empty| checks to get around StackOverflowErrors inherent in |catvec|\n   (At least in Clojure version)", :attribution "Alex Gunnarson", :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([a] [a b] [a b c] [a b c d] [a b c d e] [a b c d e f]), :arglists ([a] [a b] [a b c] [a b c d] [a b c d e] [a b c d e f] [a b c d e f & more]), :arglists-meta (nil nil nil nil nil nil nil)}}, :name quantum.core.data.vector/catvec, :variadic true, :file "src/cljc/quantum/core/data/vector.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([a] [a b] [a b c] [a b c d] [a b c d e] [a b c d e f]), :arglists ([a] [a b] [a b c] [a b c d] [a b c d e] [a b c d e f] [a b c d e f & more]), :arglists-meta (nil nil nil nil nil nil nil)}, :method-params ([a] [a b] [a b c] [a b c d] [a b c d e] [a b c d e f]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil nil), :column 1, :line 58, :attribution "Alex Gunnarson", :end-line 58, :max-fixed-arity 6, :fn-var true, :arglists ([a] [a b] [a b c] [a b c d] [a b c d e] [a b c d e f] [a b c d e f & more]), :doc "|empty| checks to get around StackOverflowErrors inherent in |catvec|\n   (At least in Clojure version)"}, subvec+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/vector.cljc", :line 82, :column 7, :end-line 82, :end-column 14, :arglists (quote ([coll a b])), :doc "Produces a new vector containing the appropriate subrange of the input vector in logarithmic time\n   (in contrast to clojure.core/subvec, which returns a reference to the input vector)\n   clojure.core/subvec is a constant-time operation that prevents the underlying vector\n   from becoming eligible for garbage collection", :attribution "Alex Gunnarson"}, :name quantum.core.data.vector/subvec+, :variadic false, :file "src/cljc/quantum/core/data/vector.cljc", :end-column 14, :method-params ([coll a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :attribution "Alex Gunnarson", :end-line 82, :max-fixed-arity 3, :fn-var true, :arglists (quote ([coll a b])), :doc "Produces a new vector containing the appropriate subrange of the input vector in logarithmic time\n   (in contrast to clojure.core/subvec, which returns a reference to the input vector)\n   clojure.core/subvec is a constant-time operation that prevents the underlying vector\n   from becoming eligible for garbage collection"}, vector+? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/vector.cljc", :line 96, :column 7, :end-line 96, :end-column 15, :arglists (quote ([obj]))}, :name quantum.core.data.vector/vector+?, :variadic false, :file "src/cljc/quantum/core/data/vector.cljc", :end-column 15, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}}, :require-macros {ns quantum.core.ns, quantum.core.ns quantum.core.ns}, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc "Vector operations. Includes relaxed radix-balanced vectors (RRB vectors)\n          my Michal Marczyk. Also includes |conjl| (for now)."}