;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, defalias quantum.core.ns, ns-exclude quantum.core.ns, defonce quantum.core.ns, source quantum.core.ns}, :excludes #{split-at merge sorted-map-by sorted-map}, :name quantum.core.data.map, :imports nil, :requires {avl clojure.data.avl, clojure.data.avl clojure.data.avl, clojure.core.rrb-vector clojure.core.rrb-vector, ns quantum.core.ns, quantum.core.ns quantum.core.ns, core cljs.core, cljs.core cljs.core}, :uses {AMap quantum.core.ns, AArrList quantum.core.ns, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, ALSeq quantum.core.ns, ARegex quantum.core.ns, AExactNum quantum.core.ns, AEditable quantum.core.ns, AKey quantum.core.ns, AQueue quantum.core.ns, AError quantum.core.ns, ADouble quantum.core.ns, AVec quantum.core.ns, ADecimal quantum.core.ns, Exception quantum.core.ns, AInt quantum.core.ns, ATransient quantum.core.ns, ANum quantum.core.ns, ANil quantum.core.ns}, :defs {ordered-map {:name quantum.core.data.map/ordered-map, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 13, :column 1, :end-line 13, :end-column 22, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 13, :column 11, :end-line 13, :end-column 22}}, om {:name quantum.core.data.map/om, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 14, :column 1, :end-line 14, :end-column 13, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 14, :column 11, :end-line 14, :end-column 13}}, sorted-map {:name quantum.core.data.map/sorted-map, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 16, :column 1, :end-line 16, :end-column 16, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 16, :column 6, :end-line 16, :end-column 16}}, sorted-map-by {:name quantum.core.data.map/sorted-map-by, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 17, :column 1, :end-line 17, :end-column 19, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 17, :column 6, :end-line 17, :end-column 19}}, map-entry {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 23, :column 7, :end-line 23, :end-column 16, :arglists (quote ([k v])), :doc "A performant replacement for creating 2-tuples (vectors), e.g., as return values\n   in a |kv-reduce| function.\n\n   Now overshadowed by ztellman's unrolled vectors in 1.8.0.\n\n   Time to create 100000000 2-tuples:\n   new tuple-vector 55.816415 ms\n   map-entry        37.542442 ms\n\n   However, insertion into maps is faster with map-entry:\n\n   (def vs [[1 2] [3 4]])\n   (def ms [(map-entry 1 2) (map-entry 3 4)])\n   (def m0 {})\n   508.122831 ms (dotimes [n 1000000] (into m0 vs))\n   310.335998 ms (dotimes [n 1000000] (into m0 ms))", :attribution "Alex Gunnarson"}, :name quantum.core.data.map/map-entry, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :end-column 16, :method-params ([k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :attribution "Alex Gunnarson", :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k v])), :doc "A performant replacement for creating 2-tuples (vectors), e.g., as return values\n   in a |kv-reduce| function.\n\n   Now overshadowed by ztellman's unrolled vectors in 1.8.0.\n\n   Time to create 100000000 2-tuples:\n   new tuple-vector 55.816415 ms\n   map-entry        37.542442 ms\n\n   However, insertion into maps is faster with map-entry:\n\n   (def vs [[1 2] [3 4]])\n   (def ms [(map-entry 1 2) (map-entry 3 4)])\n   (def m0 {})\n   508.122831 ms (dotimes [n 1000000] (into m0 vs))\n   310.335998 ms (dotimes [n 1000000] (into m0 ms))"}, map-entry-seq {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 45, :column 7, :end-line 45, :end-column 20, :arglists (quote ([args]))}, :name quantum.core.data.map/map-entry-seq, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :end-column 20, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args]))}, merge {:protocol-inline nil, :meta {:performance "782.922731 ms |merge+| vs. 1.133217 sec normal |merge|\n                 on the CLJS version; 1.5 times faster!", :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [m0] [m0 m1]), :arglists ([] [m0] [m0 m1] [m0 m1 & ms]), :arglists-meta (nil nil nil nil)}, :column 7, :line 55, :attribution "Alex Gunnarson", :end-line 55, :arglists (quote ([] [m0] [m0 m1] [m0 m1 & ms])), :doc "A performant drop-in replacement for |clojure.core/merge|.\n\n  398.815137 msecs (core/merge m1 m2)\n  188.270844 msecs (seqspert.hash-map/sequential-splice-hash-maps m1 m2)\n  25.401196  msecs (seqspert.hash-map/parallel-splice-hash-maps   m1 m2)))"}, :performance "782.922731 ms |merge+| vs. 1.133217 sec normal |merge|\n                 on the CLJS version; 1.5 times faster!", :name quantum.core.data.map/merge, :variadic true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [m0] [m0 m1]), :arglists ([] [m0] [m0 m1] [m0 m1 & ms]), :arglists-meta (nil nil nil nil)}, :method-params ([] [m0] [m0 m1]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 55, :attribution "Alex Gunnarson", :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists ([] [m0] [m0 m1] [m0 m1 & ms]), :doc "A performant drop-in replacement for |clojure.core/merge|.\n\n  398.815137 msecs (core/merge m1 m2)\n  188.270844 msecs (seqspert.hash-map/sequential-splice-hash-maps m1 m2)\n  25.401196  msecs (seqspert.hash-map/parallel-splice-hash-maps   m1 m2)))"}, split-at {:name quantum.core.data.map/split-at, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 90, :column 1, :end-line 90, :end-column 19, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/data/map.cljc", :line 90, :column 11, :end-line 90, :end-column 19}}}, :require-macros {ns quantum.core.ns, quantum.core.ns quantum.core.ns}, :cljs.analyzer/constants {:seen #{& cljs.core/array-map :ns :name :variadic cljs.core :file :end-column :top-fn quantum.core.data.map/om :method-params quantum.core.data.map/split-at :arglists-meta :column n split-at coll :line :macro :attribution quantum.core.data.map/ordered-map :end-line clojure.data.avl/split-at om array-map :max-fixed-arity ordered-map :arglists clojure.data.avl :doc keyvals :test quantum.core.data.map}, :order [cljs.core/array-map :ns :name :file :end-column :top-fn :column :line :end-line :arglists :doc :test cljs.core array-map :variadic :max-fixed-arity :method-params :arglists-meta keyvals & :macro quantum.core.data.map/ordered-map quantum.core.data.map :attribution ordered-map quantum.core.data.map/om om clojure.data.avl/split-at clojure.data.avl split-at n coll quantum.core.data.map/split-at]}, :doc "Useful map functions. |map-entry|, a better merge, sorted-maps, etc."}