;; Analyzed by ClojureScript 1.7.170
{:name quantum.core.process, :doc "A very experimental namespace based on using the shell,\n          interacting with it, using common commands, etc., from\n          within a REPL.", :excludes #{conj! assoc!}, :use-macros {def- quantum.core.ns, with-resources quantum.core.resources, whenf*n quantum.core.logic, wait-until quantum.core.thread.async, doto->> quantum.core.function, try-times quantum.core.error, condfc quantum.core.logic, f*n quantum.core.function, coll-and quantum.core.logic, try+ quantum.core.error, fn-not quantum.core.logic, defcurried quantum.core.function, ifn quantum.core.logic, defalias quantum.core.ns, whencf*n quantum.core.logic, with-do quantum.core.function, <- quantum.core.function, whenc quantum.core.logic, throw-when quantum.core.error, ifp quantum.core.logic, assertf-> quantum.core.error, fn-or quantum.core.logic, if*n quantum.core.logic, fn-eq? quantum.core.logic, condf*n quantum.core.logic, ns-exclude quantum.core.ns, coll-or quantum.core.logic, assertf->> quantum.core.error, fn-and quantum.core.logic, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, throw+ quantum.core.error, source quantum.core.ns, condpc quantum.core.logic, fn= quantum.core.logic, assert quantum.core.error, throw-unless quantum.core.error, whenp quantum.core.logic, whenf quantum.core.logic, eq? quantum.core.logic, with-assert quantum.core.error, condf quantum.core.logic, fn->> quantum.core.function}, :require-macros {res quantum.core.resources, logic quantum.core.logic, log quantum.core.log, async quantum.core.thread.async, fn quantum.core.function, quantum.core.log quantum.core.log, quantum.core.resources quantum.core.resources, ns quantum.core.ns, quantum.core.logic quantum.core.logic, err quantum.core.error, quantum.core.thread.async quantum.core.thread.async, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, quantum.core.function quantum.core.function}, :uses {AMap quantum.core.ns, take!! quantum.core.thread.async, juxtm quantum.core.function, concur quantum.core.thread.async, juxt-kv quantum.core.function, any? quantum.core.logic, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, Err quantum.core.error, ABool quantum.core.ns, ATreeMap quantum.core.ns, chan quantum.core.thread.async, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, >!! quantum.core.thread.async, ASet quantum.core.ns, with-pr->> quantum.core.function, nnil? quantum.core.logic, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, put!! quantum.core.thread.async, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, splice-or quantum.core.logic, with-msg->> quantum.core.function, <!! quantum.core.thread.async, compr quantum.core.function, AQueue quantum.core.ns, peek!! quantum.core.thread.async, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, message? quantum.core.thread.async, closed? quantum.core.resources, AVec quantum.core.ns, ->ex quantum.core.error, ADecimal quantum.core.ns, close-req? quantum.core.thread.async, Exception quantum.core.ns, empty! quantum.core.thread.async, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, alts!! quantum.core.thread.async, nempty? quantum.core.logic, ANum quantum.core.ns, ANil quantum.core.ns, unary quantum.core.function, withf->> quantum.core.function, with-cleanup quantum.core.resources}, :requires {res quantum.core.resources, clojure.core.rrb-vector clojure.core.rrb-vector, logic quantum.core.logic, log quantum.core.log, async quantum.core.thread.async, cljs.core cljs.core, fn quantum.core.function, quantum.core.log quantum.core.log, quantum.core.resources quantum.core.resources, ns quantum.core.ns, quantum.core.logic quantum.core.logic, err quantum.core.error, paths quantum.core.paths, quantum.core.paths quantum.core.paths, quantum.core.thread.async quantum.core.thread.async, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, core cljs.core, quantum.core.function quantum.core.function}, :imports nil}