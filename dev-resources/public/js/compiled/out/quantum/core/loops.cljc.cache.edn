;; Analyzed by ClojureScript 1.7.170
{:name quantum.core.loops, :doc "Useful looping constructs. Most of these, like |doseq| and |for|,\n          are faster than their lazy clojure.core counterparts.", :excludes #{reduce doseq for}, :use-macros {def- quantum.core.ns, whenf*n quantum.core.logic, doto->> quantum.core.function, try-times quantum.core.error, condfc quantum.core.logic, f*n quantum.core.function, coll-and quantum.core.logic, try+ quantum.core.error, fn-not quantum.core.logic, defcurried quantum.core.function, ifn quantum.core.logic, defalias quantum.core.ns, whencf*n quantum.core.logic, with-do quantum.core.function, <- quantum.core.function, whenc quantum.core.logic, throw-when quantum.core.error, ifp quantum.core.logic, assertf-> quantum.core.error, fn-or quantum.core.logic, if*n quantum.core.logic, fn-eq? quantum.core.logic, condf*n quantum.core.logic, ns-exclude quantum.core.ns, coll-or quantum.core.logic, assertf->> quantum.core.error, fn-and quantum.core.logic, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, throw+ quantum.core.error, source quantum.core.ns, condpc quantum.core.logic, fn= quantum.core.logic, assert quantum.core.error, throw-unless quantum.core.error, whenp quantum.core.logic, whenf quantum.core.logic, eq? quantum.core.logic, with-assert quantum.core.error, condf quantum.core.logic, fn->> quantum.core.function}, :require-macros {logic quantum.core.logic, log quantum.core.log, fn quantum.core.function, quantum.core.log quantum.core.log, ns quantum.core.ns, quantum.core.logic quantum.core.logic, err quantum.core.error, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, quantum.core.function quantum.core.function}, :uses {AMap quantum.core.ns, juxtm quantum.core.function, juxt-kv quantum.core.function, any? quantum.core.logic, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, Err quantum.core.error, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, with-pr->> quantum.core.function, nnil? quantum.core.logic, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, splice-or quantum.core.logic, with-msg->> quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, AVec quantum.core.ns, ->ex quantum.core.error, ADecimal quantum.core.ns, Exception quantum.core.ns, ordered-map quantum.core.data.map, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, nempty? quantum.core.logic, ANum quantum.core.ns, ANil quantum.core.ns, map-entry quantum.core.data.map, unary quantum.core.function, withf->> quantum.core.function}, :requires {quantum.core.core quantum.core.core, clojure.core.rrb-vector clojure.core.rrb-vector, logic quantum.core.logic, log quantum.core.log, map quantum.core.data.map, cljs.core cljs.core, fn quantum.core.function, quantum.core.log quantum.core.log, ns quantum.core.ns, quantum.core.logic quantum.core.logic, err quantum.core.error, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, quantum.core.data.map quantum.core.data.map, core cljs.core, quantum.core.function quantum.core.function}, :imports nil, :defs {temp-arr {:name quantum.core.loops/temp-arr, :file "src/cljc/quantum/core/loops.cljc", :line 23, :column 1, :end-line 23, :end-column 14, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/loops.cljc", :line 23, :column 6, :end-line 23, :end-column 14}}, reduce-2 {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/loops.cljc", :line 136, :column 7, :end-line 136, :end-column 15, :arglists (quote ([func init coll])), :doc "|reduce|s over 2 values in a collection with each pass.\n\n   Doesn't use CollReduce... so not as fast as |reduce|.", :todo ["Possibly find a better way to do it?"], :attribution "Alex Gunnarson"}, :name quantum.core.loops/reduce-2, :variadic false, :file "src/cljc/quantum/core/loops.cljc", :end-column 15, :method-params ([func init coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :attribution "Alex Gunnarson", :todo ["Possibly find a better way to do it?"], :end-line 136, :max-fixed-arity 3, :fn-var true, :arglists (quote ([func init coll])), :doc "|reduce|s over 2 values in a collection with each pass.\n\n   Doesn't use CollReduce... so not as fast as |reduce|."}, while-recur {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/loops.cljc", :line 149, :column 7, :end-line 149, :end-column 18, :arglists (quote ([obj-0 pred func])), :attribution "Alex Gunnarson"}, :name quantum.core.loops/while-recur, :variadic false, :file "src/cljc/quantum/core/loops.cljc", :end-column 18, :method-params ([obj-0 pred func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :attribution "Alex Gunnarson", :end-line 149, :max-fixed-arity 3, :fn-var true, :arglists (quote ([obj-0 pred func]))}}}