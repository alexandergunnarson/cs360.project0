;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, doto->> quantum.core.function, f*n quantum.core.function, resolve-local quantum.core.macros.core, if-cljs quantum.core.macros.core, defcurried quantum.core.function, defalias quantum.core.ns, with-do quantum.core.function, <- quantum.core.function, ns-exclude quantum.core.ns, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, source quantum.core.ns, fn->> quantum.core.function}, :excludes #{when-let if-let}, :name quantum.core.logic, :imports nil, :requires {core cljs.core, cljs.core cljs.core, cmacros quantum.core.macros.core, quantum.core.macros.core quantum.core.macros.core, fn quantum.core.function, quantum.core.function quantum.core.function, ns quantum.core.ns, quantum.core.ns quantum.core.ns, clojure.core.rrb-vector clojure.core.rrb-vector}, :uses {AMap quantum.core.ns, juxtm quantum.core.function, juxt-kv quantum.core.function, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, with-pr->> quantum.core.function, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, with-msg->> quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, AVec quantum.core.ns, ADecimal quantum.core.ns, Exception quantum.core.ns, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, ANum quantum.core.ns, ANil quantum.core.ns, unary quantum.core.function, withf->> quantum.core.function}, :defs {bool {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 93, :column 7, :end-line 93, :end-column 11, :arglists (quote ([v])), :todo ["Deprecate or incorporate"]}, :name quantum.core.logic/bool, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :todo ["Deprecate or incorporate"], :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, rcompare {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 104, :column 7, :end-line 104, :end-column 15, :arglists (quote ([x y])), :doc "Reverse comparator.", :attribution "taoensso.encore"}, :name quantum.core.logic/rcompare, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 15, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :attribution "taoensso.encore", :end-line 104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Reverse comparator."}, any? {:name quantum.core.logic/any?, :file "src/cljc/quantum/core/logic.cljc", :line 36, :column 1, :end-line 36, :end-column 10, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 36, :column 6, :end-line 36, :end-column 10}}, is? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 220, :column 6, :end-line 220, :end-column 9}, :name quantum.core.logic/is?, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 9, :method-params ([p1__37112# p2__37113#]), :protocol-impl nil, :arglists-meta (), :column 1, :line 220, :end-line 220, :max-fixed-arity 2, :fn-var true, :arglists nil}, splice-and {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 71, :column 7, :end-line 71, :end-column 17, :arglists (quote ([obj compare-fn & coll])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj compare-fn coll)], :arglists ([obj compare-fn & coll]), :arglists-meta (nil)}}, :name quantum.core.logic/splice-and, :variadic true, :file "src/cljc/quantum/core/logic.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj compare-fn coll)], :arglists ([obj compare-fn & coll]), :arglists-meta (nil)}, :method-params [(obj compare-fn coll)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists ([obj compare-fn & coll])}, pred-and {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 46, :column 7, :end-line 46, :end-column 15, :arglists (quote ([pred obj args]))}, :name quantum.core.logic/pred-and, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 15, :method-params ([pred obj args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred obj args]))}, nnil? {:name quantum.core.logic/nnil?, :file "src/cljc/quantum/core/logic.cljc", :line 19, :column 1, :end-line 19, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 19, :column 7, :end-line 19, :end-column 12}}, pred-or {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 44, :column 7, :end-line 44, :end-column 14, :arglists (quote ([pred obj args]))}, :name quantum.core.logic/pred-or, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 14, :method-params ([pred obj args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred obj args]))}, splice-or {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 69, :column 7, :end-line 69, :end-column 16, :arglists (quote ([obj compare-fn & coll])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj compare-fn coll)], :arglists ([obj compare-fn & coll]), :arglists-meta (nil)}}, :name quantum.core.logic/splice-or, :variadic true, :file "src/cljc/quantum/core/logic.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj compare-fn coll)], :arglists ([obj compare-fn & coll]), :arglists-meta (nil)}, :method-params [(obj compare-fn coll)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists ([obj compare-fn & coll])}, apply-or {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 39, :column 7, :end-line 39, :end-column 15, :arglists (quote ([arg-list]))}, :name quantum.core.logic/apply-or, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 15, :method-params ([arg-list]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg-list]))}, apply-and {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 37, :column 7, :end-line 37, :end-column 16, :arglists (quote ([arg-list]))}, :name quantum.core.logic/apply-and, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 16, :method-params ([arg-list]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg-list]))}, iff {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 22, :column 7, :end-line 22, :end-column 10, :arglists (quote ([pred const else]))}, :name quantum.core.logic/iff, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 10, :method-params ([pred const else]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred const else]))}, iffn {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 24, :column 7, :end-line 24, :end-column 11, :arglists (quote ([pred const else-fn]))}, :name quantum.core.logic/iffn, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 11, :method-params ([pred const else-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred const else-fn]))}, dor {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 41, :column 7, :end-line 41, :end-column 10, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.logic/dor, :variadic true, :file "src/cljc/quantum/core/logic.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, nempty? {:name quantum.core.logic/nempty?, :file "src/cljc/quantum/core/logic.cljc", :line 20, :column 1, :end-line 20, :end-column 14, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 20, :column 7, :end-line 20, :end-column 14}}, nseq? {:name quantum.core.logic/nseq?, :file "src/cljc/quantum/core/logic.cljc", :line 21, :column 1, :end-line 21, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/logic.cljc", :line 21, :column 7, :end-line 21, :end-column 12}}}, :require-macros {fn quantum.core.function, quantum.core.function quantum.core.function, cmacros quantum.core.macros.core, quantum.core.macros.core quantum.core.macros.core, ns quantum.core.ns, quantum.core.ns quantum.core.ns}, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc "Logic-related functions. nnil?, nempty?, fn-not, fn-and, splice-or,\n          ifn, whenf*n, compr, fn->, condpc, and the like. Extremely useful\n          and used everywhere in the quantum library."}