;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, doto->> quantum.core.function, f*n quantum.core.function, go cljs.core.async.macros, defcurried quantum.core.function, defalias quantum.core.ns, with-do quantum.core.function, <- quantum.core.function, go-loop cljs.core.async.macros, ns-exclude quantum.core.ns, pr-attrs quantum.core.print, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, source quantum.core.ns, fn->> quantum.core.function}, :excludes #{pr}, :name quantum.core.log, :imports nil, :requires {core-async cljs.core.async, clojure.core.rrb-vector clojure.core.rrb-vector, pr quantum.core.print, tpred quantum.core.type.predicates, cljs.core cljs.core, fn quantum.core.function, cljs.core.async cljs.core.async, ns quantum.core.ns, com.stuartsierra.component com.stuartsierra.component, component com.stuartsierra.component, quantum.core.print quantum.core.print, quantum.core.ns quantum.core.ns, core cljs.core, quantum.core.function quantum.core.function, quantum.core.type.predicates quantum.core.type.predicates}, :uses {AMap quantum.core.ns, juxtm quantum.core.function, ! quantum.core.print, juxt-kv quantum.core.function, <! cljs.core.async, AArrList quantum.core.ns, boolean? quantum.core.type.predicates, atom? quantum.core.type.predicates, firsta quantum.core.function, *fn quantum.core.function, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, with-pr->> quantum.core.function, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, !* quantum.core.print, with-msg->> quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, >! cljs.core.async, AVec quantum.core.ns, derefable? quantum.core.type.predicates, ADecimal quantum.core.ns, alts! cljs.core.async, Exception quantum.core.ns, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, ANum quantum.core.ns, ANil quantum.core.ns, unary quantum.core.function, seqable? quantum.core.type.predicates, withf->> quantum.core.function}, :defs {map->LogEntry {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 24, :column 12, :end-line 24, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__43496]))}, :name quantum.core.log/map->LogEntry, :variadic false, :file "src/cljc/quantum/core/log.cljc", :end-column 20, :method-params ([G__43496]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43496]))}, LogInitializer {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name quantum.core.log/LogInitializer, :file "src/cljc/quantum/core/log.cljc", :end-column 26, :type true, :column 12, :internal-ctor true, :line 44, :record true, :end-line 44, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, enable! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 37, :column 7, :end-line 37, :end-column 14, :arglists (quote ([pr-type] [pr-type & pr-types])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([pr-type]), :arglists ([pr-type] [pr-type & pr-types]), :arglists-meta (nil nil)}}, :name quantum.core.log/enable!, :variadic true, :file "src/cljc/quantum/core/log.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([pr-type]), :arglists ([pr-type] [pr-type & pr-types]), :arglists-meta (nil nil)}, :method-params ([pr-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists ([pr-type] [pr-type & pr-types])}, log {:name quantum.core.log/log, :file "src/cljc/quantum/core/log.cljc", :line 22, :column 1, :end-line 22, :end-column 13, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 22, :column 10, :end-line 22, :end-column 13}}, LogEntry {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name quantum.core.log/LogEntry, :file "src/cljc/quantum/core/log.cljc", :end-column 20, :type true, :column 12, :internal-ctor true, :line 24, :record true, :end-line 24, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->LogInitializer {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 44, :column 12, :end-line 44, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__43554]))}, :name quantum.core.log/map->LogInitializer, :variadic false, :file "src/cljc/quantum/core/log.cljc", :end-column 26, :method-params ([G__43554]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43554]))}, LoggingLevels {:num-fields 6, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name quantum.core.log/LoggingLevels, :file "src/cljc/quantum/core/log.cljc", :end-column 25, :type true, :column 12, :internal-ctor true, :line 14, :record true, :end-line 14, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, disable! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 30, :column 7, :end-line 30, :end-column 15, :arglists (quote ([pr-type] [pr-type & pr-types])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([pr-type]), :arglists ([pr-type] [pr-type & pr-types]), :arglists-meta (nil nil)}}, :name quantum.core.log/disable!, :variadic true, :file "src/cljc/quantum/core/log.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([pr-type]), :arglists ([pr-type] [pr-type & pr-types]), :arglists-meta (nil nil)}, :method-params ([pr-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists ([pr-type] [pr-type & pr-types])}, pr* {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 60, :column 7, :end-line 60, :end-column 10, :arglists (quote ([trace? pretty? print-fn pr-type args opts])), :doc "Prints to |System/out| if the print alert type @pr-type\n   is in the set of enabled print alert types, |levels|.\n\n   Logs the printed result to the global log |log|.", :attribution "Alex Gunnarson"}, :name quantum.core.log/pr*, :variadic false, :file "src/cljc/quantum/core/log.cljc", :end-column 10, :method-params ([trace? pretty? print-fn pr-type args opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :attribution "Alex Gunnarson", :end-line 60, :max-fixed-arity 6, :fn-var true, :arglists (quote ([trace? pretty? print-fn pr-type args opts])), :doc "Prints to |System/out| if the print alert type @pr-type\n   is in the set of enabled print alert types, |levels|.\n\n   Logs the printed result to the global log |log|."}, ->LoggingLevels {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 14, :column 12, :end-line 14, :end-column 25, :internal-ctor true, :factory :positional, :arglists (quote ([warn user macro-expand debug trace env]))}, :name quantum.core.log/->LoggingLevels, :variadic false, :file "src/cljc/quantum/core/log.cljc", :end-column 25, :method-params ([warn user macro-expand debug trace env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 14, :end-line 14, :max-fixed-arity 6, :fn-var true, :arglists (quote ([warn user macro-expand debug trace env]))}, ->log-initializer {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 54, :column 7, :end-line 54, :end-column 24, :arglists (quote ([{:keys [levels], :as opts}]))}, :name quantum.core.log/->log-initializer, :variadic false, :file "src/cljc/quantum/core/log.cljc", :end-column 24, :method-params ([p__43560]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [levels], :as opts}]))}, ->LogEntry {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 24, :column 12, :end-line 24, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([time-stamp type ns-source message]))}, :name quantum.core.log/->LogEntry, :variadic false, :file "src/cljc/quantum/core/log.cljc", :end-column 20, :method-params ([time-stamp type ns-source message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 24, :end-line 24, :max-fixed-arity 4, :fn-var true, :arglists (quote ([time-stamp type ns-source message]))}, levels {:name quantum.core.log/levels, :file "src/cljc/quantum/core/log.cljc", :line 17, :column 1, :end-line 17, :end-column 16, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 17, :column 10, :end-line 17, :end-column 16}}, ->LogInitializer {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 44, :column 12, :end-line 44, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([levels]))}, :name quantum.core.log/->LogInitializer, :variadic false, :file "src/cljc/quantum/core/log.cljc", :end-column 26, :method-params ([levels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([levels]))}, map->LoggingLevels {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/log.cljc", :line 14, :column 12, :end-line 14, :end-column 25, :internal-ctor true, :factory :map, :arglists (quote ([G__43488]))}, :name quantum.core.log/map->LoggingLevels, :variadic false, :file "src/cljc/quantum/core/log.cljc", :end-column 25, :method-params ([G__43488]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43488]))}}, :require-macros {fn quantum.core.function, quantum.core.function quantum.core.function, asyncm cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros, pr quantum.core.print, quantum.core.print quantum.core.print, ns quantum.core.ns, quantum.core.ns quantum.core.ns}, :cljs.analyzer/constants {:seen #{time-stamp user macro-expand message :pretty? :warn :trace :type :debug :env :ns-source warn trace :levels debug type env ns-source :prev :trace? levels :time-stamp :user :log? :timestamp? :macro-expand :message}, :order [:warn :user :macro-expand :debug :trace :env warn user macro-expand debug trace env :time-stamp :type :ns-source :message time-stamp type ns-source message :levels levels :trace? :pretty? :timestamp? :prev :log?]}, :doc "Simple logging capabilities. Keeps a global log, has a status channel,\n          prints only if the level is enabled, etc.\n\n          By no means a full-fledged logging system, but useful nonetheless."}