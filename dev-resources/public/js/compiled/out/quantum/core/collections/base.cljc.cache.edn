;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, whenf*n quantum.core.logic, doto->> quantum.core.function, condfc quantum.core.logic, f*n quantum.core.function, coll-and quantum.core.logic, fn-not quantum.core.logic, defcurried quantum.core.function, ifn quantum.core.logic, defalias quantum.core.ns, whencf*n quantum.core.logic, with-do quantum.core.function, <- quantum.core.function, whenc quantum.core.logic, ifp quantum.core.logic, fn-or quantum.core.logic, if*n quantum.core.logic, fn-eq? quantum.core.logic, condf*n quantum.core.logic, ns-exclude quantum.core.ns, coll-or quantum.core.logic, fn-and quantum.core.logic, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, source quantum.core.ns, condpc quantum.core.logic, fn= quantum.core.logic, whenp quantum.core.logic, whenf quantum.core.logic, eq? quantum.core.logic, condf quantum.core.logic, fn->> quantum.core.function}, :excludes #{name seqable?}, :name quantum.core.collections.base, :imports nil, :requires {set quantum.core.data.set, clojure.core.rrb-vector clojure.core.rrb-vector, logic quantum.core.logic, map quantum.core.data.map, cljs.core cljs.core, fn quantum.core.function, vec quantum.core.data.vector, fast-zip.core fast-zip.core, ns quantum.core.ns, quantum.core.data.vector quantum.core.data.vector, quantum.core.logic quantum.core.logic, quantum.core.data.set quantum.core.data.set, str clojure.string, zip fast-zip.core, clojure.string clojure.string, clojure.walk clojure.walk, quantum.core.ns quantum.core.ns, quantum.core.data.map quantum.core.data.map, core cljs.core, quantum.core.function quantum.core.function}, :uses {AMap quantum.core.ns, postwalk clojure.walk, sorted-set+ quantum.core.data.set, juxtm quantum.core.function, vector+? quantum.core.data.vector, juxt-kv quantum.core.function, any? quantum.core.logic, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, catvec quantum.core.data.vector, ASet quantum.core.ns, with-pr->> quantum.core.function, nnil? quantum.core.logic, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, subvec+ quantum.core.data.vector, AEditable quantum.core.ns, zeroid quantum.core.function, prewalk clojure.walk, AKey quantum.core.ns, splice-or quantum.core.logic, vector+ quantum.core.data.vector, with-msg->> quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, AVec quantum.core.ns, ADecimal quantum.core.ns, Exception quantum.core.ns, ordered-map quantum.core.data.map, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, nempty? quantum.core.logic, ANum quantum.core.ns, ANil quantum.core.ns, map-entry quantum.core.data.map, unary quantum.core.function, withf->> quantum.core.function}, :defs {dissoc-in {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 98, :column 7, :end-line 98, :end-column 16, :arglists (quote ([m ks])), :doc "Dissociate a value in a nested assocative structure, identified by a sequence\n  of keys. Any collections left empty by the operation will be dissociated from\n  their containing structures.\n  This implementation was adapted from clojure.core.contrib", :attribution "weavejester.medley", :todo ["Transientize"]}, :name quantum.core.collections.base/dissoc-in, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 16, :method-params ([m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :attribution "weavejester.medley", :todo ["Transientize"], :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ks])), :doc "Dissociate a value in a nested assocative structure, identified by a sequence\n  of keys. Any collections left empty by the operation will be dissociated from\n  their containing structures.\n  This implementation was adapted from clojure.core.contrib"}, camelcase {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 32, :column 7, :end-line 32, :end-column 16, :arglists (quote ([str-0 & [method?]])), :doc "In the macro namespace because it is used with protocol creation.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(str-0 [method?])], :arglists ([str-0 & [method?]]), :arglists-meta (nil)}}, :name quantum.core.collections.base/camelcase, :variadic true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(str-0 [method?])], :arglists ([str-0 & [method?]]), :arglists-meta (nil)}, :method-params [(str-0 [method?])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists ([str-0 & [method?]]), :doc "In the macro namespace because it is used with protocol creation."}, zip-reduce {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 25, :column 7, :end-line 25, :end-column 17, :arglists (quote ([f init z]))}, :name quantum.core.collections.base/zip-reduce, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 17, :method-params ([f init z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init z]))}, frequencies-by {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 47, :column 7, :end-line 47, :end-column 21, :arglists (quote ([f coll])), :doc "Like |frequencies| crossed with |group-by|.", :in (quote [second [[1 2 3] [4 2 6] [5 2 7]]]), :out (quote {[1 2 3] 3, [4 2 6] 3, [5 2 7] 3})}, :name quantum.core.collections.base/frequencies-by, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 21, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :out (quote {[1 2 3] 3, [4 2 6] 3, [5 2 7] 3}), :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Like |frequencies| crossed with |group-by|.", :in (quote [second [[1 2 3] [4 2 6] [5 2 7]]])}, name {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 12, :column 7, :end-line 12, :end-column 11, :arglists (quote ([x]))}, :name quantum.core.collections.base/name, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, update-first {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 72, :column 7, :end-line 72, :end-column 19, :arglists (quote ([x f]))}, :name quantum.core.collections.base/update-first, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 19, :method-params ([x f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x f]))}, update-val {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 74, :column 7, :end-line 74, :end-column 17, :arglists (quote ([[k v] f]))}, :name quantum.core.collections.base/update-val, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 17, :method-params ([p__37359 f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[k v] f]))}, comparators {:name quantum.core.collections.base/comparators, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 67, :column 1, :end-line 67, :end-column 17, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 67, :column 6, :end-line 67, :end-column 17}}, appears-within? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 81, :column 7, :end-line 81, :end-column 22, :arglists (quote ([x coll])), :doc "Returns true if x appears within coll at any nesting depth..", :source "scgilardi/slingshot", :contributors {"Alex Gunnarson" "Added termination on find"}}, :name quantum.core.collections.base/appears-within?, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 22, :method-params ([x coll]), :protocol-impl nil, :source "scgilardi/slingshot", :arglists-meta (nil nil), :column 1, :line 81, :contributors {"Alex Gunnarson" "Added termination on find"}, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x coll])), :doc "Returns true if x appears within coll at any nesting depth.."}, ns-qualify {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 44, :column 7, :end-line 44, :end-column 17, :arglists (quote ([sym ns-]))}, :name quantum.core.collections.base/ns-qualify, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 17, :method-params ([sym ns-]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sym ns-]))}, default-zipper {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 14, :column 7, :end-line 14, :end-column 21, :arglists (quote ([coll]))}, :name quantum.core.collections.base/default-zipper, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 21, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, ensure-set {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :line 17, :column 6, :end-line 17, :end-column 16}, :name quantum.core.collections.base/ensure-set, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/collections/base.cljc", :end-column 16, :method-params ([obj__22318__auto__]), :protocol-impl nil, :arglists-meta (), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists nil}}, :require-macros {fn quantum.core.function, quantum.core.function quantum.core.function, logic quantum.core.logic, quantum.core.logic quantum.core.logic, ns quantum.core.ns, quantum.core.ns quantum.core.ns}, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc "Base collections operations. Pre-generics."}