;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, with-resources quantum.core.resources, try-times quantum.core.error, go cljs.core.async.macros, try+ quantum.core.error, defalias quantum.core.ns, go-loop cljs.core.async.macros, throw-when quantum.core.error, assertf-> quantum.core.error, ns-exclude quantum.core.ns, assertf->> quantum.core.error, defonce quantum.core.ns, throw+ quantum.core.error, source quantum.core.ns, assert quantum.core.error, throw-unless quantum.core.error, with-assert quantum.core.error}, :excludes #{defonce assert}, :name quantum.core.io.core, :imports nil, :requires {res quantum.core.resources, core-async cljs.core.async, clojure.core.rrb-vector clojure.core.rrb-vector, log quantum.core.log, cljs.core cljs.core, quantum.core.log quantum.core.log, cljs.core.async cljs.core.async, quantum.core.resources quantum.core.resources, datascript.core datascript.core, db quantum.db.datomic, quantum.core.convert quantum.core.convert, mdb datascript.core, ns quantum.core.ns, err quantum.core.error, com.stuartsierra.component com.stuartsierra.component, component com.stuartsierra.component, quantum.db.datomic quantum.db.datomic, conv quantum.core.convert, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, core cljs.core}, :uses {AMap quantum.core.ns, <! cljs.core.async, AArrList quantum.core.ns, Err quantum.core.error, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, ALSeq quantum.core.ns, ->str quantum.core.convert, ARegex quantum.core.ns, AExactNum quantum.core.ns, EphemeralDatabase quantum.db.datomic, AEditable quantum.core.ns, AKey quantum.core.ns, AQueue quantum.core.ns, AError quantum.core.ns, ->name quantum.core.convert, ADouble quantum.core.ns, >! cljs.core.async, AVec quantum.core.ns, ->ex quantum.core.error, ADecimal quantum.core.ns, alts! cljs.core.async, Exception quantum.core.ns, AInt quantum.core.ns, ATransient quantum.core.ns, ANum quantum.core.ns, ANil quantum.core.ns, with-cleanup quantum.core.resources}, :defs {persist! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/io/core.cljc", :line 16, :column 7, :end-line 16, :end-column 15, :arglists (quote ([k x])), :doc "Persists @x between page reloads.\n   Saves to js/localStorage as key @k."}, :name quantum.core.io.core/persist!, :variadic false, :file "src/cljc/quantum/core/io/core.cljc", :end-column 15, :method-params ([k x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k x])), :doc "Persists @x between page reloads.\n   Saves to js/localStorage as key @k."}, Persister {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name quantum.core.io.core/Persister, :file "src/cljc/quantum/core/io/core.cljc", :end-column 12, :type true, :column 3, :internal-ctor true, :line 25, :record true, :end-line 25, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :doc "Persists @persist-data"}, ->Persister {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/io/core.cljc", :line 25, :column 3, :end-line 25, :end-column 12, :doc "Persists @persist-data", :internal-ctor true, :factory :positional, :arglists (quote ([persist-key persist-class persist-data opts]))}, :name quantum.core.io.core/->Persister, :variadic false, :file "src/cljc/quantum/core/io/core.cljc", :end-column 12, :method-params ([persist-key persist-class persist-data opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 23, :end-line 25, :max-fixed-arity 4, :fn-var true, :arglists (quote ([persist-key persist-class persist-data opts])), :doc "Persists @persist-data"}, map->Persister {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/io/core.cljc", :line 25, :column 3, :end-line 25, :end-column 12, :doc "Persists @persist-data", :internal-ctor true, :factory :map, :arglists (quote ([G__47371]))}, :name quantum.core.io.core/map->Persister, :variadic false, :file "src/cljc/quantum/core/io/core.cljc", :end-column 12, :method-params ([G__47371]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 23, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__47371])), :doc "Persists @persist-data"}}, :require-macros {res quantum.core.resources, cljs.core.async.macros cljs.core.async.macros, log quantum.core.log, quantum.core.log quantum.core.log, quantum.core.resources quantum.core.resources, ns quantum.core.ns, err quantum.core.error, asyncm cljs.core.async.macros, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns}, :cljs.analyzer/constants {:seen #{:schema :else :db-after :db :persist-key :history :persist-class :recur :persist-data persist-key :persister persist-class persist-data :opts :duplicate-persisters :unhandled-class opts :listeners}, :order [:persist-key :persist-class :persist-data :opts :schema :db :history :listeners :duplicate-persisters :persister :db-after :recur :else :unhandled-class persist-key persist-class persist-data opts]}, :doc nil}