;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, whenf*n quantum.core.logic, doto->> quantum.core.function, condfc quantum.core.logic, f*n quantum.core.function, coll-and quantum.core.logic, fn-not quantum.core.logic, defcurried quantum.core.function, ifn quantum.core.logic, defalias quantum.core.ns, whencf*n quantum.core.logic, with-do quantum.core.function, <- quantum.core.function, whenc quantum.core.logic, ifp quantum.core.logic, fn-or quantum.core.logic, if*n quantum.core.logic, fn-eq? quantum.core.logic, condf*n quantum.core.logic, ns-exclude quantum.core.ns, coll-or quantum.core.logic, fn-and quantum.core.logic, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, source quantum.core.ns, condpc quantum.core.logic, fn= quantum.core.logic, whenp quantum.core.logic, whenf quantum.core.logic, eq? quantum.core.logic, condf quantum.core.logic, fn->> quantum.core.function}, :excludes #{defonce}, :name quantum.core.print, :imports nil, :requires {clojure.core.rrb-vector clojure.core.rrb-vector, logic quantum.core.logic, cljs.core cljs.core, fn quantum.core.function, vec quantum.core.data.vector, ns quantum.core.ns, quantum.core.data.vector quantum.core.data.vector, quantum.core.logic quantum.core.logic, cljs.pprint cljs.pprint, quantum.core.ns quantum.core.ns, core cljs.core, quantum.core.function quantum.core.function}, :uses {AMap quantum.core.ns, juxtm quantum.core.function, vector+? quantum.core.data.vector, juxt-kv quantum.core.function, any? quantum.core.logic, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, StringBufferWriter cljs.core, catvec quantum.core.data.vector, ASet quantum.core.ns, with-pr->> quantum.core.function, nnil? quantum.core.logic, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, subvec+ quantum.core.data.vector, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, splice-or quantum.core.logic, vector+ quantum.core.data.vector, with-msg->> quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, AVec quantum.core.ns, ADecimal quantum.core.ns, Exception quantum.core.ns, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, nempty? quantum.core.logic, ANum quantum.core.ns, ANil quantum.core.ns, unary quantum.core.function, withf->> quantum.core.function}, :defs {max-length {:name quantum.core.print/max-length, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 18, :column 1, :end-line 18, :end-column 20, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 18, :column 10, :end-line 18, :end-column 20}}, blacklist {:name quantum.core.print/blacklist, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 19, :column 1, :end-line 20, :end-column 12, :doc "A set of classes not to print", :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 20, :column 3, :end-line 20, :end-column 12, :doc "A set of classes not to print"}}, ! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 22, :column 7, :end-line 22, :end-column 8, :arglists (quote ([obj] [obj & objs])), :doc "Fast pretty print using brandonbloom/fipp.\n   At least 5 times faster than |clojure.pprint/pprint|.\n   Prints no later than having consumed the bound amount of memory,\n   so you see your first few lines of output instantaneously.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([obj]), :arglists ([obj] [obj & objs]), :arglists-meta (nil nil)}}, :name quantum.core.print/!, :variadic true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([obj]), :arglists ([obj] [obj & objs]), :arglists-meta (nil nil)}, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists ([obj] [obj & objs]), :doc "Fast pretty print using brandonbloom/fipp.\n   At least 5 times faster than |clojure.pprint/pprint|.\n   Prints no later than having consumed the bound amount of memory,\n   so you see your first few lines of output instantaneously."}, suppress {:name quantum.core.print/suppress, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 52, :column 1, :end-line 52, :end-column 14, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 52, :column 6, :end-line 52, :end-column 14}}, representative-coll {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 54, :column 7, :end-line 54, :end-column 26, :arglists (quote ([source-0])), :doc "Gets the first element of every collection, until it returns empty.\n\n   Useful for printing out representative samples of large collections\n   which would be undesirable to print in whole.", :attribution "Alex Gunnarson"}, :name quantum.core.print/representative-coll, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :end-column 26, :method-params ([source-0]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :attribution "Alex Gunnarson", :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source-0])), :doc "Gets the first element of every collection, until it returns empty.\n\n   Useful for printing out representative samples of large collections\n   which would be undesirable to print in whole."}, !* {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 96, :column 7, :end-line 96, :end-column 9, :arglists (quote ([obj]))}, :name quantum.core.print/!*, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :end-column 9, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, pprint-symbol {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 138, :column 8, :end-line 138, :end-column 21, :private true, :arglists (quote ([x]))}, :private true, :name quantum.core.print/pprint-symbol, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, pprint-hints {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :line 163, :column 7, :end-line 163, :end-column 19, :arglists (quote ([x]))}, :name quantum.core.print/pprint-hints, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/print.cljc", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros {cljs.pprint cljs.pprint, logic quantum.core.logic, quantum.core.logic quantum.core.logic, fn quantum.core.function, quantum.core.function quantum.core.function, ns quantum.core.ns, quantum.core.ns quantum.core.ns}, :cljs.analyzer/constants {:seen #{:else :tag}, :order [:else :tag]}, :doc "Printing functions such as fipp.edn (a fast pretty printer),\n          |pr-attrs| (which prints the key attributes of a given object\n          or expression, blacklisted printable objects (so you don't\n          have to wait while you accidentally print out an entire database), \n          and so on."}