;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, resolve-local quantum.core.macros.core, if-cljs quantum.core.macros.core, defalias quantum.core.ns, ns-exclude quantum.core.ns, defonce quantum.core.ns, source quantum.core.ns}, :excludes #{defonce}, :name quantum.core.error.try-catch, :imports nil, :requires {clojure.core.rrb-vector clojure.core.rrb-vector, quantum.core.macros.core quantum.core.macros.core, cmacros quantum.core.macros.core, cljs.core cljs.core, ns quantum.core.ns, str clojure.string, clojure.string clojure.string, quantum.core.collections.base quantum.core.collections.base, quantum.core.ns quantum.core.ns, core cljs.core}, :uses {AMap quantum.core.ns, AArrList quantum.core.ns, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, if-cljs quantum.core.macros.core, ASet quantum.core.ns, ALSeq quantum.core.ns, ARegex quantum.core.ns, AExactNum quantum.core.ns, AEditable quantum.core.ns, AKey quantum.core.ns, AQueue quantum.core.ns, appears-within? quantum.core.collections.base, AError quantum.core.ns, ADouble quantum.core.ns, AVec quantum.core.ns, ADecimal quantum.core.ns, Exception quantum.core.ns, AInt quantum.core.ns, ATransient quantum.core.ns, ANum quantum.core.ns, ANil quantum.core.ns}, :defs {unwrap {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 41, :column 7, :end-line 41, :end-column 13, :arglists (quote ([t])), :doc "If t is a context wrapper or other IExceptionInfo, returns the\n  corresponding context with t assoc'd as the value for :wrapper, else\n  returns nil"}, :name quantum.core.error.try-catch/unwrap, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 13, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "If t is a context wrapper or other IExceptionInfo, returns the\n  corresponding context with t assoc'd as the value for :wrapper, else\n  returns nil"}, gen-finally {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 166, :column 7, :end-line 166, :end-column 18, :arglists (quote ([else-clause finally-clause threw?-sym])), :doc "Returns either nil or a list containing a finally clause for a try\n  form based on the parsed else and/or finally clause from a try+\n  form"}, :name quantum.core.error.try-catch/gen-finally, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 18, :method-params ([else-clause finally-clause threw?-sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 3, :fn-var true, :arglists (quote ([else-clause finally-clause threw?-sym])), :doc "Returns either nil or a list containing a finally clause for a try\n  form based on the parsed else and/or finally clause from a try+\n  form"}, stack-trace {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 186, :column 7, :end-line 186, :end-column 18, :arglists (quote ([])), :doc "Returns the current stack trace beginning at the caller's frame"}, :name quantum.core.error.try-catch/stack-trace, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current stack trace beginning at the caller's frame"}, wrap {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 33, :column 7, :end-line 33, :end-column 11, :arglists (quote ([{:keys [object message cause stack-trace]}])), :doc "Returns a context wrapper given a context"}, :name quantum.core.error.try-catch/wrap, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 11, :method-params ([p__37379]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [object message cause stack-trace]}])), :doc "Returns a context wrapper given a context"}, get-thrown-object {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 242, :column 7, :end-line 242, :end-column 24, :arglists (quote ([t]))}, :name quantum.core.error.try-catch/get-thrown-object, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 24, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, *catch-hook* {:name quantum.core.error.try-catch/*catch-hook*, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 108, :column 1, :end-line 110, :end-column 15, :dynamic true, :doc "https://github.com/scgilardi/slingshot/", :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 110, :column 3, :end-line 110, :end-column 15, :dynamic true, :doc "https://github.com/scgilardi/slingshot/"}}, get-throw-context {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 237, :column 7, :end-line 237, :end-column 24, :arglists (quote ([t])), :source "https://github.com/scgilardi/slingshot/"}, :name quantum.core.error.try-catch/get-throw-context, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 24, :method-params ([t]), :protocol-impl nil, :source "https://github.com/scgilardi/slingshot/", :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, get-context {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 71, :column 7, :end-line 71, :end-column 18, :arglists (quote ([t])), :doc "Returns a context given a Throwable t. If t or any Throwable in its\n  cause chain is a context wrapper or other IExceptionInfo, returns\n  the corresponding context with the wrapper assoc'd as the value\n  for :wrapper and t assoc'd as the value for :throwable. Otherwise\n  creates a new context based on t with t assoc'd as the value\n  for :throwable."}, :name quantum.core.error.try-catch/get-context, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Returns a context given a Throwable t. If t or any Throwable in its\n  cause chain is a context wrapper or other IExceptionInfo, returns\n  the corresponding context with the wrapper assoc'd as the value\n  for :wrapper and t assoc'd as the value for :throwable. Otherwise\n  creates a new context based on t with t assoc'd as the value\n  for :throwable."}, unwrap-all {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 51, :column 7, :end-line 51, :end-column 17, :arglists (quote ([t])), :doc "Searches Throwable t and its cause chain for a context wrapper or\n  other IExceptionInfo. If one is found, returns the corresponding\n  context with the wrapper assoc'd as the value for :wrapper, else\n  returns nil."}, :name quantum.core.error.try-catch/unwrap-all, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 17, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Searches Throwable t and its cause chain for a context wrapper or\n  other IExceptionInfo. If one is found, returns the corresponding\n  context with the wrapper assoc'd as the value for :wrapper, else\n  returns nil."}, make-context {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 20, :column 7, :end-line 20, :end-column 19, :arglists (quote ([t] [object message cause stack-trace])), :doc "Makes a throw context from a throwable or explicit arguments", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([t] [object message cause stack-trace]), :arglists ([t] [object message cause stack-trace]), :arglists-meta (nil nil)}}, :name quantum.core.error.try-catch/make-context, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([t] [object message cause stack-trace]), :arglists ([t] [object message cause stack-trace]), :arglists-meta (nil nil)}, :method-params ([t] [object message cause stack-trace]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 4, :fn-var true, :arglists ([t] [object message cause stack-trace]), :doc "Makes a throw context from a throwable or explicit arguments"}, parse-throw+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 196, :column 7, :end-line 196, :end-column 19, :arglists (quote ([object cause & args])), :doc "Returns a vector containing the message and cause that result from\n  processing the arguments to throw+", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(object cause args)], :arglists ([object cause & args]), :arglists-meta (nil)}}, :name quantum.core.error.try-catch/parse-throw+, :variadic true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(object cause args)], :arglists ([object cause & args]), :arglists-meta (nil)}, :method-params [(object cause args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 2, :fn-var true, :arglists ([object cause & args]), :doc "Returns a vector containing the message and cause that result from\n  processing the arguments to throw+"}, get-throwable {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 62, :column 7, :end-line 62, :end-column 20, :arglists (quote ([{object :object, :as context}])), :doc "Returns a Throwable given a context: the object in context if it's\n  a Throwable, else a Throwable context wrapper", :macro-dependency? true}, :name quantum.core.error.try-catch/get-throwable, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 20, :method-params ([p__37386]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{object :object, :as context}])), :macro-dependency? true, :doc "Returns a Throwable given a context: the object in context if it's\n  a Throwable, else a Throwable context wrapper"}, *throw-hook* {:name quantum.core.error.try-catch/*throw-hook*, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 217, :column 1, :end-line 221, :end-column 15, :dynamic true, :doc "Hook to allow overriding the behavior of throw+. Must be\n  bound to a function of one argument, a context map. Defaults to\n  default-throw-hook.", :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 221, :column 3, :end-line 221, :end-column 15, :dynamic true, :doc "Hook to allow overriding the behavior of throw+. Must be\n  bound to a function of one argument, a context map. Defaults to\n  default-throw-hook."}}, parse-try+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 85, :column 7, :end-line 85, :end-column 17, :arglists (quote ([body])), :doc "Returns a vector of seqs containing the expressions, catch clauses,\n  and finally clauses in a try+ body, or throws if the body's structure\n  is invalid"}, :name quantum.core.error.try-catch/parse-try+, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 17, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :doc "Returns a vector of seqs containing the expressions, catch clauses,\n  and finally clauses in a try+ body, or throws if the body's structure\n  is invalid"}, throw-fn {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 223, :column 7, :end-line 223, :end-column 15, :arglists (quote ([object {cause :throwable} stack-trace & args])), :doc "Helper to throw a context based on arguments and &env from throw+", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(object {cause :throwable} stack-trace args)], :arglists ([object {cause :throwable} stack-trace & args]), :arglists-meta (nil)}}, :name quantum.core.error.try-catch/throw-fn, :variadic true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(object {cause :throwable} stack-trace args)], :arglists ([object {cause :throwable} stack-trace & args]), :arglists-meta (nil)}, :method-params [(object {cause :throwable} stack-trace args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 3, :fn-var true, :arglists ([object {cause :throwable} stack-trace & args]), :doc "Helper to throw a context based on arguments and &env from throw+"}, default-throw-hook {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 213, :column 7, :end-line 213, :end-column 25, :arglists (quote ([context]))}, :name quantum.core.error.try-catch/default-throw-hook, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 25, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context]))}, throw-arg {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :line 14, :column 7, :end-line 14, :end-column 16, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.error.try-catch/throw-arg, :variadic true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error/try_catch.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}}, :require-macros {cmacros quantum.core.macros.core, quantum.core.macros.core quantum.core.macros.core, ns quantum.core.ns, quantum.core.ns quantum.core.ns}, :cljs.analyzer/constants {:seen #{:stack-trace try :cause :expression :else-clause :else cljs.core/deref finally cljs.core/when-not else :quantum.core.error.try-catch/wrapper? :finally-clause :throwable catch :wrapper :object :message :catch-clause}, :order [:object :message :cause :stack-trace :quantum.core.error.try-catch/wrapper? :wrapper :throwable catch else finally :catch-clause :else-clause :finally-clause :expression try cljs.core/when-not cljs.core/deref :else]}, :doc "Improved try/catch via Slingshot (https://github.com/scgilardi/slingshot)\n          adaptation for both Clojure & ClojureScript."}