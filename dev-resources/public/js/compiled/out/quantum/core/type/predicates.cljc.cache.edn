;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, whenf*n quantum.core.logic, doto->> quantum.core.function, condfc quantum.core.logic, f*n quantum.core.function, coll-and quantum.core.logic, fn-not quantum.core.logic, defcurried quantum.core.function, ifn quantum.core.logic, defalias quantum.core.ns, whencf*n quantum.core.logic, with-do quantum.core.function, <- quantum.core.function, whenc quantum.core.logic, ifp quantum.core.logic, fn-or quantum.core.logic, if*n quantum.core.logic, fn-eq? quantum.core.logic, condf*n quantum.core.logic, ns-exclude quantum.core.ns, coll-or quantum.core.logic, fn-and quantum.core.logic, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, source quantum.core.ns, condpc quantum.core.logic, fn= quantum.core.logic, whenp quantum.core.logic, whenf quantum.core.logic, eq? quantum.core.logic, condf quantum.core.logic, fn->> quantum.core.function}, :excludes #{seqable?}, :name quantum.core.type.predicates, :imports nil, :requires {quantum.core.core quantum.core.core, clojure.core.rrb-vector clojure.core.rrb-vector, logic quantum.core.logic, cljs.core cljs.core, fn quantum.core.function, ns quantum.core.ns, quantum.core.logic quantum.core.logic, c quantum.core.core, quantum.core.ns quantum.core.ns, core cljs.core, quantum.core.function quantum.core.function}, :uses {AMap quantum.core.ns, juxtm quantum.core.function, juxt-kv quantum.core.function, any? quantum.core.logic, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, with-pr->> quantum.core.function, nnil? quantum.core.logic, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, splice-or quantum.core.logic, with-msg->> quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, AVec quantum.core.ns, ADecimal quantum.core.ns, Exception quantum.core.ns, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, nempty? quantum.core.logic, ANum quantum.core.ns, ANil quantum.core.ns, unary quantum.core.function, withf->> quantum.core.function}, :defs {atom? {:name quantum.core.type.predicates/atom?, :file "src/cljc/quantum/core/type/predicates.cljc", :line 6, :column 1, :end-line 6, :end-column 16, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/predicates.cljc", :line 6, :column 11, :end-line 6, :end-column 16}}, seqable? {:name quantum.core.type.predicates/seqable?, :file "src/cljc/quantum/core/type/predicates.cljc", :line 7, :column 1, :end-line 7, :end-column 19, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/predicates.cljc", :line 7, :column 11, :end-line 7, :end-column 19}}, boolean? {:name quantum.core.type.predicates/boolean?, :file "src/cljc/quantum/core/type/predicates.cljc", :line 8, :column 1, :end-line 8, :end-column 19, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/predicates.cljc", :line 8, :column 11, :end-line 8, :end-column 19}}, derefable? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/predicates.cljc", :line 10, :column 7, :end-line 10, :end-column 17, :arglists (quote ([obj]))}, :name quantum.core.type.predicates/derefable?, :variadic false, :file "src/cljc/quantum/core/type/predicates.cljc", :end-column 17, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, map-entry? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/predicates.cljc", :line 13, :column 6, :end-line 13, :end-column 16}, :name quantum.core.type.predicates/map-entry?, :variadic false, :file "src/cljc/quantum/core/type/predicates.cljc", :end-column 16, :method-params ([G__43483]), :protocol-impl nil, :arglists-meta (), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists nil}, listy? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/predicates.cljc", :line 16, :column 7, :end-line 16, :end-column 13, :arglists (quote ([obj]))}, :name quantum.core.type.predicates/listy?, :variadic false, :file "src/cljc/quantum/core/type/predicates.cljc", :end-column 13, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}}, :require-macros {fn quantum.core.function, quantum.core.function quantum.core.function, logic quantum.core.logic, quantum.core.logic quantum.core.logic, ns quantum.core.ns, quantum.core.ns quantum.core.ns}, :cljs.analyzer/constants {:seen #{quantum.core.core x quantum.core.core/boolean? boolean? atom? :ns :name :file :end-column :column quantum.core.type.predicates/atom? :line quantum.core.type.predicates/seqable? :macro :end-line quantum.core.type.predicates/boolean? quantum.core.core/seqable? :arglists quantum.core.core/atom? :doc :test seqable? quantum.core.type.predicates}, :order [quantum.core.core/atom? :ns :name :file :end-column :column :line :end-line :arglists :doc :test quantum.core.core atom? x :macro quantum.core.type.predicates/atom? quantum.core.type.predicates quantum.core.core/seqable? seqable? quantum.core.type.predicates/seqable? quantum.core.core/boolean? boolean? quantum.core.type.predicates/boolean?]}, :doc nil}