;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, whenf*n quantum.core.logic, doto->> quantum.core.function, condfc quantum.core.logic, f*n quantum.core.function, coll-and quantum.core.logic, fn-not quantum.core.logic, defcurried quantum.core.function, ifn quantum.core.logic, defalias quantum.core.ns, whencf*n quantum.core.logic, with-do quantum.core.function, <- quantum.core.function, whenc quantum.core.logic, ifp quantum.core.logic, fn-or quantum.core.logic, if*n quantum.core.logic, fn-eq? quantum.core.logic, condf*n quantum.core.logic, ns-exclude quantum.core.ns, coll-or quantum.core.logic, fn-and quantum.core.logic, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, source quantum.core.ns, condpc quantum.core.logic, fn= quantum.core.logic, whenp quantum.core.logic, whenf quantum.core.logic, eq? quantum.core.logic, condf quantum.core.logic, fn->> quantum.core.function}, :excludes #{defonce merge sorted-map-by sorted-map}, :name quantum.core.type.bootstrap, :imports nil, :requires {set quantum.core.data.set, clojure.core.rrb-vector clojure.core.rrb-vector, logic quantum.core.logic, map quantum.core.data.map, cljs.core cljs.core, fn quantum.core.function, ns quantum.core.ns, quantum.core.logic quantum.core.logic, quantum.core.data.set quantum.core.data.set, quantum.core.ns quantum.core.ns, quantum.core.data.map quantum.core.data.map, core cljs.core, quantum.core.function quantum.core.function}, :uses {AMap quantum.core.ns, sorted-set+ quantum.core.data.set, juxtm quantum.core.function, juxt-kv quantum.core.function, any? quantum.core.logic, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, with-pr->> quantum.core.function, nnil? quantum.core.logic, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, splice-or quantum.core.logic, with-msg->> quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, AVec quantum.core.ns, ADecimal quantum.core.ns, Exception quantum.core.ns, ordered-map quantum.core.data.map, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, nempty? quantum.core.logic, ANum quantum.core.ns, ANil quantum.core.ns, map-entry quantum.core.data.map, unary quantum.core.function, withf->> quantum.core.function}, :defs {type-meta {:name quantum.core.type.bootstrap/type-meta, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/bootstrap.cljc", :line 8, :column 1, :end-line 12, :end-column 12, :doc "Could do <Class>/MAX_VALUE for the maxes vin Java but JS doesn't like it of course\n             In JavaScript, all numbers are 64-bit floating point numbers.\n             This means you can't represent in JavaScript all the Java longs\n             Max 'safe' int: (dec (Math/pow 2 53))", :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/bootstrap.cljc", :line 12, :column 3, :end-line 12, :end-column 12, :doc "Could do <Class>/MAX_VALUE for the maxes vin Java but JS doesn't like it of course\n             In JavaScript, all numbers are 64-bit floating point numbers.\n             This means you can't represent in JavaScript all the Java longs\n             Max 'safe' int: (dec (Math/pow 2 53))"}}, max-values {:name quantum.core.type.bootstrap/max-values, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/bootstrap.cljc", :line 76, :column 1, :end-line 76, :end-column 16, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/bootstrap.cljc", :line 76, :column 6, :end-line 76, :end-column 16}}, max-type {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/bootstrap.cljc", :line 89, :column 7, :end-line 89, :end-column 15, :arglists (quote ([types]))}, :name quantum.core.type.bootstrap/max-type, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/bootstrap.cljc", :end-column 15, :method-params ([types]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([types]))}, inner-type {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/bootstrap.cljc", :line 96, :column 7, :end-line 96, :end-column 17, :arglists (quote ([type])), :todo ["Handle object arrays and multi-dimensional arrays" "Throw exception if called on an integral ('uncuttable') type"]}, :name quantum.core.type.bootstrap/inner-type, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/type/bootstrap.cljc", :end-column 17, :method-params ([type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :todo ["Handle object arrays and multi-dimensional arrays" "Throw exception if called on an integral ('uncuttable') type"], :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([type]))}}, :require-macros {fn quantum.core.function, quantum.core.function quantum.core.function, logic quantum.core.logic, quantum.core.logic quantum.core.logic, ns quantum.core.ns, quantum.core.ns quantum.core.ns}, :cljs.analyzer/constants {:seen #{:min Object boolean object char long double short int float :bits :max byte}, :order [boolean short byte char int long float double :bits :min :max object Object]}, :doc "Some useful macros, like de-repetitivizing protocol extensions.\n          Also some plumbing macros for |for| loops and the like."}