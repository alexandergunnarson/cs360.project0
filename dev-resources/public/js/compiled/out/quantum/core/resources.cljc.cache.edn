;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, whenf*n quantum.core.logic, wait-until quantum.core.thread.async, doto->> quantum.core.function, try-times quantum.core.error, condfc quantum.core.logic, f*n quantum.core.function, coll-and quantum.core.logic, go cljs.core.async.macros, try+ quantum.core.error, fn-not quantum.core.logic, defcurried quantum.core.function, ifn quantum.core.logic, defalias quantum.core.ns, whencf*n quantum.core.logic, with-do quantum.core.function, <- quantum.core.function, whenc quantum.core.logic, go-loop cljs.core.async.macros, throw-when quantum.core.error, ifp quantum.core.logic, assertf-> quantum.core.error, fn-or quantum.core.logic, if*n quantum.core.logic, fn-eq? quantum.core.logic, condf*n quantum.core.logic, ns-exclude quantum.core.ns, coll-or quantum.core.logic, assertf->> quantum.core.error, fn-and quantum.core.logic, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, throw+ quantum.core.error, source quantum.core.ns, condpc quantum.core.logic, fn= quantum.core.logic, assert quantum.core.error, throw-unless quantum.core.error, whenp quantum.core.logic, whenf quantum.core.logic, eq? quantum.core.logic, with-assert quantum.core.error, condf quantum.core.logic, fn->> quantum.core.function}, :excludes #{defonce assert seqable?}, :name quantum.core.resources, :imports nil, :requires {core-async cljs.core.async, clojure.core.rrb-vector clojure.core.rrb-vector, logic quantum.core.logic, log quantum.core.log, tpred quantum.core.type.predicates, async quantum.core.thread.async, cljs.core cljs.core, fn quantum.core.function, vec quantum.core.data.vector, quantum.core.log quantum.core.log, cljs.core.async cljs.core.async, ns quantum.core.ns, quantum.core.data.vector quantum.core.data.vector, quantum.core.logic quantum.core.logic, err quantum.core.error, com.stuartsierra.component com.stuartsierra.component, component com.stuartsierra.component, quantum.core.thread.async quantum.core.thread.async, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, core cljs.core, quantum.core.function quantum.core.function, quantum.core.type.predicates quantum.core.type.predicates}, :uses {AMap quantum.core.ns, take!! quantum.core.thread.async, juxtm quantum.core.function, vector+? quantum.core.data.vector, concur quantum.core.thread.async, juxt-kv quantum.core.function, <! cljs.core.async, any? quantum.core.logic, AArrList quantum.core.ns, boolean? quantum.core.type.predicates, atom? quantum.core.type.predicates, firsta quantum.core.function, *fn quantum.core.function, Err quantum.core.error, ABool quantum.core.ns, ATreeMap quantum.core.ns, chan quantum.core.thread.async, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, >!! quantum.core.thread.async, catvec quantum.core.data.vector, ASet quantum.core.ns, with-pr->> quantum.core.function, nnil? quantum.core.logic, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, put!! quantum.core.thread.async, subvec+ quantum.core.data.vector, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, splice-or quantum.core.logic, vector+ quantum.core.data.vector, with-msg->> quantum.core.function, <!! quantum.core.thread.async, compr quantum.core.function, AQueue quantum.core.ns, peek!! quantum.core.thread.async, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, >! cljs.core.async, AVec quantum.core.ns, derefable? quantum.core.type.predicates, ->ex quantum.core.error, ADecimal quantum.core.ns, alts! cljs.core.async, Exception quantum.core.ns, empty! quantum.core.thread.async, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, alts!! quantum.core.thread.async, nempty? quantum.core.logic, ANum quantum.core.ns, ANil quantum.core.ns, unary quantum.core.function, seqable? quantum.core.type.predicates, withf->> quantum.core.function}, :defs {register-system! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 120, :column 7, :end-line 120, :end-column 23, :arglists (quote ([ident config make-system])), :doc "Registers a system with the global system registry."}, :name quantum.core.resources/register-system!, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 23, :method-params ([ident config make-system]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ident config make-system])), :doc "Registers a system with the global system registry."}, ->System {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 77, :column 12, :end-line 77, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([config sys-map make-system running?]))}, :name quantum.core.resources/->System, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 18, :method-params ([config sys-map make-system running?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 77, :end-line 77, :max-fixed-arity 4, :fn-var true, :arglists (quote ([config sys-map make-system running?]))}, close! {:name quantum.core.resources/close!, :file "src/cljc/quantum/core/resources.cljc", :line 37, :column 1, :end-line 37, :end-column 16, :declared true, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 37, :column 10, :end-line 37, :end-column 16, :declared true}}, ISystem {:meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 70, :column 14, :end-line 70, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {init! [[this]], start! [[this]], stop! [[this]], go! [[this]], reload! [[this] [this ns-]]}}}, :protocol-symbol true, :name quantum.core.resources/ISystem, :file "src/cljc/quantum/core/resources.cljc", :end-column 21, :column 1, :line 70, :protocol-info {:methods {init! [[this]], start! [[this]], stop! [[this]], go! [[this]], reload! [[this] [this ns-]]}}, :info nil, :end-line 70, :impls #{quantum.core.resources/System}, :doc nil, :jsdoc ("@interface")}, start! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 72, :column 4, :end-line 72, :end-column 10, :protocol quantum.core.resources/ISystem, :doc nil, :arglists (quote ([this]))}, :protocol quantum.core.resources/ISystem, :name quantum.core.resources/start!, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, systems {:name quantum.core.resources/systems, :file "src/cljc/quantum/core/resources.cljc", :line 68, :column 1, :end-line 68, :end-column 17, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 68, :column 10, :end-line 68, :end-column 17}}, init! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 71, :column 4, :end-line 71, :end-column 9, :protocol quantum.core.resources/ISystem, :doc nil, :arglists (quote ([this]))}, :protocol quantum.core.resources/ISystem, :name quantum.core.resources/init!, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, System {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection quantum.core.resources/ISystem cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name quantum.core.resources/System, :file "src/cljc/quantum/core/resources.cljc", :end-column 18, :type true, :column 12, :internal-ctor true, :line 77, :record true, :end-line 77, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, reload! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 75, :column 4, :end-line 75, :end-column 11, :protocol quantum.core.resources/ISystem, :doc nil, :arglists (quote ([this] [this ns-])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this ns-]), :arglists ([this] [this ns-]), :arglists-meta (nil nil)}}, :protocol quantum.core.resources/ISystem, :name quantum.core.resources/reload!, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([this] [this ns-]), :arglists ([this] [this ns-]), :arglists-meta (nil nil)}, :method-params ([this] [this ns-]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists ([this] [this ns-]), :doc nil}, go! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 74, :column 4, :end-line 74, :end-column 7, :protocol quantum.core.resources/ISystem, :doc nil, :arglists (quote ([this]))}, :protocol quantum.core.resources/ISystem, :name quantum.core.resources/go!, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 7, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, stop! {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 73, :column 4, :end-line 73, :end-column 9, :protocol quantum.core.resources/ISystem, :doc nil, :arglists (quote ([this]))}, :protocol quantum.core.resources/ISystem, :name quantum.core.resources/stop!, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, closed? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 27, :column 6, :end-line 27, :end-column 13}, :name quantum.core.resources/closed?, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 13, :method-params ([G__44101]), :protocol-impl nil, :arglists-meta (), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists nil}, cleanup! {:name quantum.core.resources/cleanup!, :file "src/cljc/quantum/core/resources.cljc", :line 48, :column 1, :end-line 48, :end-column 18, :declared true, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 48, :column 10, :end-line 48, :end-column 18, :declared true}}, map->System {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 77, :column 12, :end-line 77, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__44112]))}, :name quantum.core.resources/map->System, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 18, :method-params ([G__44112]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__44112]))}, ->system {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 112, :column 7, :end-line 112, :end-column 15, :arglists (quote ([config make-system])), :doc "Constructor for |System|."}, :name quantum.core.resources/->system, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 15, :method-params ([config make-system]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([config make-system])), :doc "Constructor for |System|."}, open? {:name quantum.core.resources/open?, :file "src/cljc/quantum/core/resources.cljc", :line 25, :column 1, :end-line 25, :end-column 15, :declared true, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 25, :column 10, :end-line 25, :end-column 15, :declared true}}, with-cleanup {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/resources.cljc", :line 50, :column 7, :end-line 50, :end-column 19, :arglists (quote ([obj cleanup-seq]))}, :name quantum.core.resources/with-cleanup, :variadic false, :file "src/cljc/quantum/core/resources.cljc", :end-column 19, :method-params ([obj cleanup-seq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj cleanup-seq]))}}, :require-macros {logic quantum.core.logic, cljs.core.async.macros cljs.core.async.macros, log quantum.core.log, async quantum.core.thread.async, fn quantum.core.function, quantum.core.log quantum.core.log, ns quantum.core.ns, quantum.core.logic quantum.core.logic, err quantum.core.error, asyncm cljs.core.async.macros, quantum.core.thread.async quantum.core.thread.async, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, quantum.core.function quantum.core.function}, :cljs.analyzer/constants {:seen #{make-system :running? :sys-map :config :warn sys-map running? config :assertion-error :make-system :user}, :order [:warn :user :config :sys-map :make-system :running? config sys-map make-system running? :assertion-error]}, :doc "Convenience functions for creating a system and registering components\n            according to Stuart Sierra's Component framework."}