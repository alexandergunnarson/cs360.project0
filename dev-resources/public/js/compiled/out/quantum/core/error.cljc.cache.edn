;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, doto->> quantum.core.function, f*n quantum.core.function, resolve-local quantum.core.macros.core, if-cljs quantum.core.macros.core, defcurried quantum.core.function, defalias quantum.core.ns, with-do quantum.core.function, <- quantum.core.function, ns-exclude quantum.core.ns, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, source quantum.core.ns, fn->> quantum.core.function}, :excludes #{assert}, :name quantum.core.error, :imports nil, :requires {clojure.core.rrb-vector clojure.core.rrb-vector, quantum.core.error.try-catch quantum.core.error.try-catch, log quantum.core.log, map quantum.core.data.map, quantum.core.macros.core quantum.core.macros.core, cmacros quantum.core.macros.core, cljs.core cljs.core, fn quantum.core.function, quantum.core.log quantum.core.log, tc quantum.core.error.try-catch, ns quantum.core.ns, cbase quantum.core.collections.base, str clojure.string, clojure.string clojure.string, quantum.core.collections.base quantum.core.collections.base, quantum.core.ns quantum.core.ns, quantum.core.data.map quantum.core.data.map, core cljs.core, quantum.core.function quantum.core.function}, :uses {AMap quantum.core.ns, juxtm quantum.core.function, juxt-kv quantum.core.function, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, with-pr->> quantum.core.function, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, with-msg->> quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, AVec quantum.core.ns, ADecimal quantum.core.ns, Exception quantum.core.ns, ordered-map quantum.core.data.map, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, ANum quantum.core.ns, ANil quantum.core.ns, map-entry quantum.core.data.map, unary quantum.core.function, withf->> quantum.core.function}, :defs {Err {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name quantum.core.error/Err, :file "src/cljc/quantum/core/error.cljc", :end-column 15, :type true, :column 12, :internal-ctor true, :line 15, :record true, :end-line 15, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Err {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error.cljc", :line 15, :column 12, :end-line 15, :end-column 15, :internal-ctor true, :factory :positional, :arglists (quote ([type msg objs]))}, :name quantum.core.error/->Err, :variadic false, :file "src/cljc/quantum/core/error.cljc", :end-column 15, :method-params ([type msg objs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type msg objs]))}, map->Err {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error.cljc", :line 15, :column 12, :end-line 15, :end-column 15, :internal-ctor true, :factory :map, :arglists (quote ([G__44007]))}, :name quantum.core.error/map->Err, :variadic false, :file "src/cljc/quantum/core/error.cljc", :end-column 15, :method-params ([G__44007]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__44007]))}, ->err {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error.cljc", :line 17, :column 7, :end-line 17, :end-column 12, :arglists (quote ([type] [type msg] [type msg objs])), :doc "Constructor for |Err|.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type] [type msg] [type msg objs]), :arglists ([type] [type msg] [type msg objs]), :arglists-meta (nil nil nil)}}, :name quantum.core.error/->err, :variadic false, :file "src/cljc/quantum/core/error.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type] [type msg] [type msg objs]), :arglists ([type] [type msg] [type msg objs]), :arglists-meta (nil nil nil)}, :method-params ([type] [type msg] [type msg objs]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists ([type] [type msg] [type msg objs]), :doc "Constructor for |Err|."}, ->ex {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error.cljc", :line 25, :column 7, :end-line 25, :end-column 11, :arglists (quote ([type] [type msg] [type msg objs])), :doc "Creates an exception.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type] [type msg] [type msg objs]), :arglists ([type] [type msg] [type msg objs]), :arglists-meta (nil nil nil)}}, :name quantum.core.error/->ex, :variadic false, :file "src/cljc/quantum/core/error.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type] [type msg] [type msg objs]), :arglists ([type] [type msg] [type msg objs]), :arglists-meta (nil nil nil)}, :method-params ([type] [type msg] [type msg objs]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists ([type] [type msg] [type msg objs]), :doc "Creates an exception."}, error? {:name quantum.core.error/error?, :file "src/cljc/quantum/core/error.cljc", :line 31, :column 1, :end-line 31, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/error.cljc", :line 31, :column 6, :end-line 31, :end-column 12}}}, :require-macros {log quantum.core.log, quantum.core.macros.core quantum.core.macros.core, cmacros quantum.core.macros.core, fn quantum.core.function, quantum.core.log quantum.core.log, ns quantum.core.ns, cbase quantum.core.collections.base, quantum.core.collections.base quantum.core.collections.base, quantum.core.ns quantum.core.ns, quantum.core.function quantum.core.function}, :cljs.analyzer/constants {:seen #{objs :msg :type msg type :objs}, :order [:type :msg :objs type msg objs]}, :doc "Error handling. Improved try/catch, and built-in error types for convenience's sake."}