;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, doto->> quantum.core.function, try-times quantum.core.error, f*n quantum.core.function, try+ quantum.core.error, defcurried quantum.core.function, defalias quantum.core.ns, with-do quantum.core.function, <- quantum.core.function, throw-when quantum.core.error, assertf-> quantum.core.error, ns-exclude quantum.core.ns, assertf->> quantum.core.error, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, throw+ quantum.core.error, source quantum.core.ns, assert quantum.core.error, throw-unless quantum.core.error, with-assert quantum.core.error, fn->> quantum.core.function}, :excludes #{update}, :name quantum.core.numeric.combinatorics, :imports nil, :requires {clojure.core.rrb-vector clojure.core.rrb-vector, log quantum.core.log, cljs.core cljs.core, fn quantum.core.function, quantum.core.log quantum.core.log, ns quantum.core.ns, err quantum.core.error, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, core cljs.core, quantum.core.function quantum.core.function}, :uses {AMap quantum.core.ns, juxtm quantum.core.function, juxt-kv quantum.core.function, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, Err quantum.core.error, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, ASet quantum.core.ns, with-pr->> quantum.core.function, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, with-msg->> quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, AVec quantum.core.ns, ->ex quantum.core.error, ADecimal quantum.core.ns, Exception quantum.core.ns, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, ANum quantum.core.ns, ANil quantum.core.ns, unary quantum.core.function, withf->> quantum.core.function}, :defs {expt-int {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 582, :column 8, :end-line 582, :end-column 16, :private true, :arglists (quote ([base pow])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/expt-int, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 16, :method-params ([base pow]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 582, :from "clojure.math.combinatorics", :end-line 582, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base pow]))}, permutation-index-duplicates {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 709, :column 8, :end-line 709, :end-column 36, :private true, :arglists (quote ([l])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/permutation-index-duplicates, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 36, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 709, :from "clojure.math.combinatorics", :end-line 709, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, nth-combination {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 22, :column 7, :author "Mark Engelberg", :line 647, :from "clojure.math.combinatorics", :contributors ["Alex Gunnarson"], :end-line 647, :arglists (quote ([items t n])), :doc "The nth element of the sequence of t-combinations of items"}, :name quantum.core.numeric.combinatorics/nth-combination, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 22, :method-params ([items t n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 647, :from "clojure.math.combinatorics", :contributors ["Alex Gunnarson"], :end-line 647, :max-fixed-arity 3, :fn-var true, :arglists (quote ([items t n])), :doc "The nth element of the sequence of t-combinations of items"}, partitions {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items args)], :arglists ([items & args]), :arglists-meta (nil)}, :column 7, :author "Mark Engelberg", :line 1029, :from "clojure.math.combinatorics", :end-line 1029, :arglists (quote ([items & args])), :doc "All the lexicographic distinct partitions of items.\n    Optionally pass in :min and/or :max to specify inclusive bounds on the number of parts the items can be split into."}, :name quantum.core.numeric.combinatorics/partitions, :variadic true, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items args)], :arglists ([items & args]), :arglists-meta (nil)}, :method-params [(items args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :author "Mark Engelberg", :line 1029, :from "clojure.math.combinatorics", :end-line 1029, :max-fixed-arity 1, :fn-var true, :arglists ([items & args]), :doc "All the lexicographic distinct partitions of items.\n    Optionally pass in :min and/or :max to specify inclusive bounds on the number of parts the items can be split into."}, all-different? {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 22, :column 8, :author "Mark Engelberg", :line 74, :from "clojure.math.combinatorics", :end-line 74, :arglists (quote ([s])), :doc "Annoyingly, the built-in distinct? doesn't handle 0 args, so we need\n   to write our own version that considers the empty-list to be distinct"}, :private true, :name quantum.core.numeric.combinatorics/all-different?, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 74, :from "clojure.math.combinatorics", :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Annoyingly, the built-in distinct? doesn't handle 0 args, so we need\n   to write our own version that considers the empty-list to be distinct"}, nth-permutation-duplicates {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 34, :column 8, :author "Mark Engelberg", :line 463, :from "clojure.math.combinatorics", :contributors ["Alex Gunnarson"], :end-line 463, :arglists (quote ([l n])), :doc "Input should be a sorted sequential collection l of distinct items, \n   output is nth-permutation (0-based)"}, :private true, :name quantum.core.numeric.combinatorics/nth-permutation-duplicates, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 34, :method-params ([l n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 463, :from "clojure.math.combinatorics", :contributors ["Alex Gunnarson"], :end-line 463, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l n])), :doc "Input should be a sorted sequential collection l of distinct items, \n   output is nth-permutation (0-based)"}, count-permutations-from-frequencies {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 388, :column 8, :end-line 388, :end-column 43, :private true, :arglists (quote ([freqs])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/count-permutations-from-frequencies, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 43, :method-params ([freqs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 388, :from "clojure.math.combinatorics", :end-line 388, :max-fixed-arity 1, :fn-var true, :arglists (quote ([freqs]))}, nth-combination-freqs {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 29, :column 8, :author "Mark Engelberg", :line 628, :from "clojure.math.combinatorics", :end-line 628, :arglists (quote ([freqs t n])), :doc "The nth element of the sequence of t-combinations of the multiset\n   represented by freqs"}, :private true, :name quantum.core.numeric.combinatorics/nth-combination-freqs, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 29, :method-params ([freqs t n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 628, :from "clojure.math.combinatorics", :end-line 628, :max-fixed-arity 3, :fn-var true, :arglists (quote ([freqs t n])), :doc "The nth element of the sequence of t-combinations of the multiset\n   represented by freqs"}, partitions-M {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items {from :min, to :max})], :arglists ([items & {from :min, to :max}]), :arglists-meta (nil)}, :column 8, :author "Mark Engelberg", :line 1001, :from "clojure.math.combinatorics", :end-line 1001, :arglists (quote ([items & {from :min, to :max}]))}, :private true, :name quantum.core.numeric.combinatorics/partitions-M, :variadic true, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items {from :min, to :max})], :arglists ([items & {from :min, to :max}]), :arglists-meta (nil)}, :method-params [(items {from :min, to :max})], :protocol-impl nil, :arglists-meta (nil), :column 1, :author "Mark Engelberg", :line 1001, :from "clojure.math.combinatorics", :end-line 1001, :max-fixed-arity 1, :fn-var true, :arglists ([items & {from :min, to :max}])}, nth-permutation {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 487, :column 7, :end-line 487, :end-column 22, :arglists (quote ([items n])), :doc "(nth (permutations items)) but calculated more directly.", :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :name quantum.core.numeric.combinatorics/nth-permutation, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 22, :method-params ([items n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 487, :from "clojure.math.combinatorics", :end-line 487, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items n])), :doc "(nth (permutations items)) but calculated more directly."}, remove-nth {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 355, :column 8, :end-line 355, :end-column 18, :private true, :arglists (quote ([l n])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/remove-nth, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 18, :method-params ([l n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 355, :from "clojure.math.combinatorics", :end-line 355, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l n]))}, n-take-k {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 535, :column 8, :end-line 535, :end-column 16, :private true, :arglists (quote ([n k])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/n-take-k, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 16, :method-params ([n k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 535, :from "clojure.math.combinatorics", :end-line 535, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n k]))}, permutation-index-distinct {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 699, :column 8, :end-line 699, :end-column 34, :private true, :arglists (quote ([l])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/permutation-index-distinct, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 34, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 699, :from "clojure.math.combinatorics", :end-line 699, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, partitions-H {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items args)], :arglists ([items & args]), :arglists-meta (nil)}, :column 8, :author "Mark Engelberg", :line 842, :from "clojure.math.combinatorics", :end-line 842, :arglists (quote ([items & args]))}, :private true, :name quantum.core.numeric.combinatorics/partitions-H, :variadic true, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items args)], :arglists ([items & args]), :arglists-meta (nil)}, :method-params [(items args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :author "Mark Engelberg", :line 842, :from "clojure.math.combinatorics", :end-line 842, :max-fixed-arity 1, :fn-var true, :arglists ([items & args])}, growth-strings-H {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([n r s] [n a b r s]), :arglists ([n r s] [n a b r s]), :arglists-meta (nil nil)}, :column 8, :author "Mark Engelberg", :line 768, :from "clojure.math.combinatorics", :end-line 768, :arglists (quote ([n r s] [n a b r s]))}, :private true, :name quantum.core.numeric.combinatorics/growth-strings-H, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([n r s] [n a b r s]), :arglists ([n r s] [n a b r s]), :arglists-meta (nil nil)}, :method-params ([n r s] [n a b r s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 768, :from "clojure.math.combinatorics", :end-line 768, :max-fixed-arity 5, :fn-var true, :arglists ([n r s] [n a b r s])}, count-subsets-unmemoized {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 593, :column 8, :end-line 593, :end-column 32, :private true, :arglists (quote ([items])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/count-subsets-unmemoized, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 32, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 593, :from "clojure.math.combinatorics", :end-line 593, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items]))}, lex-partitions-H {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(N {from :min, to :max})], :arglists ([N & {from :min, to :max}]), :arglists-meta (nil)}, :column 8, :author "Mark Engelberg", :line 821, :from "clojure.math.combinatorics", :end-line 821, :arglists (quote ([N & {from :min, to :max}]))}, :private true, :name quantum.core.numeric.combinatorics/lex-partitions-H, :variadic true, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(N {from :min, to :max})], :arglists ([N & {from :min, to :max}]), :arglists-meta (nil)}, :method-params [(N {from :min, to :max})], :protocol-impl nil, :arglists-meta (nil), :column 1, :author "Mark Engelberg", :line 821, :from "clojure.math.combinatorics", :end-line 821, :max-fixed-arity 1, :fn-var true, :arglists ([N & {from :min, to :max}])}, nth-combination-distinct {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 32, :column 8, :author "Mark Engelberg", :line 612, :from "clojure.math.combinatorics", :end-line 612, :arglists (quote ([items t n])), :doc "The nth element of the sequence of t-combinations of items,\n   where items is a collection of distinct elements"}, :private true, :name quantum.core.numeric.combinatorics/nth-combination-distinct, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 32, :method-params ([items t n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 612, :from "clojure.math.combinatorics", :end-line 612, :max-fixed-arity 3, :fn-var true, :arglists (quote ([items t n])), :doc "The nth element of the sequence of t-combinations of items,\n   where items is a collection of distinct elements"}, drop-permutations {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 507, :column 7, :end-line 507, :end-column 24, :arglists (quote ([items n])), :doc "(drop n (permutations items)) but calculated more directly.", :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :name quantum.core.numeric.combinatorics/drop-permutations, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 24, :method-params ([items n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 507, :from "clojure.math.combinatorics", :end-line 507, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items n])), :doc "(drop n (permutations items)) but calculated more directly."}, factorial-numbers {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 25, :column 8, :author "Mark Engelberg", :line 341, :from "clojure.math.combinatorics", :end-line 341, :arglists (quote ([n])), :doc "Input is a non-negative base 10 integer, output is the number in the\n   factorial number system (http://en.wikipedia.org/wiki/Factorial_number_system)\n   expressed as a list of 'digits'"}, :private true, :name quantum.core.numeric.combinatorics/factorial-numbers, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 25, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 341, :from "clojure.math.combinatorics", :end-line 341, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Input is a non-negative base 10 integer, output is the number in the\n   factorial number system (http://en.wikipedia.org/wiki/Factorial_number_system)\n   expressed as a list of 'digits'"}, count-combinations {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 576, :column 7, :end-line 576, :end-column 25, :arglists (quote ([items t])), :doc "(count (combinations items t)) but computed more directly"}, :name quantum.core.numeric.combinatorics/count-combinations, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 25, :method-params ([items t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 576, :end-line 576, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items t])), :doc "(count (combinations items t)) but computed more directly"}, m5 {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 951, :column 8, :end-line 951, :end-column 10, :private true, :arglists (quote ([n m f c u v a b l r s])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/m5, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 10, :method-params ([n m f c u v a b l r s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 951, :from "clojure.math.combinatorics", :end-line 951, :max-fixed-arity 11, :fn-var true, :arglists (quote ([n m f c u v a b l r s]))}, cartesian-product {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(seqs)], :arglists ([& seqs]), :arglists-meta (nil)}, :column 7, :author "Mark Engelberg", :line 220, :from "clojure.math.combinatorics", :end-line 220, :arglists (quote ([& seqs])), :doc "All the ways to take one item from each sequence"}, :name quantum.core.numeric.combinatorics/cartesian-product, :variadic true, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(seqs)], :arglists ([& seqs]), :arglists-meta (nil)}, :method-params [(seqs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :author "Mark Engelberg", :line 220, :from "clojure.math.combinatorics", :end-line 220, :max-fixed-arity 0, :fn-var true, :arglists ([& seqs]), :doc "All the ways to take one item from each sequence"}, permutations {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 312, :column 7, :end-line 312, :end-column 19, :arglists (quote ([items])), :doc "All the distinct permutations of items, lexicographic by index \n   (special handling for duplicate items).", :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :name quantum.core.numeric.combinatorics/permutations, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 19, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 312, :from "clojure.math.combinatorics", :end-line 312, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :doc "All the distinct permutations of items, lexicographic by index \n   (special handling for duplicate items)."}, initial-perm-numbers {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 28, :column 8, :author "Mark Engelberg", :line 405, :from "clojure.math.combinatorics", :end-line 405, :arglists (quote ([freqs])), :doc "Takes a sorted frequency map and returns how far into the sequence of\n   lexicographic permutations you get by varying the first item"}, :private true, :name quantum.core.numeric.combinatorics/initial-perm-numbers, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 28, :method-params ([freqs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 405, :from "clojure.math.combinatorics", :end-line 405, :max-fixed-arity 1, :fn-var true, :arglists (quote ([freqs])), :doc "Takes a sorted frequency map and returns how far into the sequence of\n   lexicographic permutations you get by varying the first item"}, count-subsets {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 603, :column 7, :end-line 603, :end-column 20, :arglists (quote ([items])), :doc "|(count (subsets items))| but computed more directly", :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :name quantum.core.numeric.combinatorics/count-subsets, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 20, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 603, :from "clojure.math.combinatorics", :end-line 603, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :doc "|(count (subsets items))| but computed more directly"}, factorial-numbers-with-duplicates {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 41, :column 8, :author "Mark Engelberg", :line 449, :from "clojure.math.combinatorics", :end-line 449, :arglists (quote ([n freqs])), :doc "Input is a non-negative base 10 integer n, and a sorted frequency map freqs.\n   Output is a list of 'digits' in this wacky duplicate factorial number system"}, :private true, :name quantum.core.numeric.combinatorics/factorial-numbers-with-duplicates, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 41, :method-params ([n freqs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 449, :from "clojure.math.combinatorics", :end-line 449, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n freqs])), :doc "Input is a non-negative base 10 integer n, and a sorted frequency map freqs.\n   Output is a list of 'digits' in this wacky duplicate factorial number system"}, init {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 759, :column 8, :end-line 759, :end-column 12, :private true, :arglists (quote ([n s])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/init, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 12, :method-params ([n s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 759, :from "clojure.math.combinatorics", :end-line 759, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n s]))}, selections {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 242, :column 7, :end-line 242, :end-column 17, :arglists (quote ([items n])), :doc "All the ways of taking n (possibly the same) elements from the sequence of items", :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :name quantum.core.numeric.combinatorics/selections, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 17, :method-params ([items n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 242, :from "clojure.math.combinatorics", :end-line 242, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items n])), :doc "All the ways of taking n (possibly the same) elements from the sequence of items"}, factorial {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 333, :column 8, :end-line 333, :end-column 17, :private true, :arglists (quote ([n])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/factorial, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 17, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 333, :from "clojure.math.combinatorics", :end-line 333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, dec-key {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 441, :column 8, :end-line 441, :end-column 15, :private true, :arglists (quote ([m k])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/dec-key, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 15, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 441, :from "clojure.math.combinatorics", :end-line 441, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, lex-permutations {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 24, :column 8, :author "Mark Engelberg", :line 276, :from "clojure.math.combinatorics", :end-line 276, :arglists (quote ([c])), :doc "In prior versions of the combinatorics library, there were two similar functions:\n   |permutations| and |lex-permutations|.\n   It was a source of confusion to know which to call.\n   Now, you can always call |permutations|.\n   When appropriate (i.e., when you pass in a sorted sequence of numbers),\n   |permutations| will automatically call lex-permutations as a speed optimization."}, :private true, :name quantum.core.numeric.combinatorics/lex-permutations, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 24, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 276, :from "clojure.math.combinatorics", :end-line 276, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "In prior versions of the combinatorics library, there were two similar functions:\n   |permutations| and |lex-permutations|.\n   It was a source of confusion to know which to call.\n   Now, you can always call |permutations|.\n   When appropriate (i.e., when you pass in a sorted sequence of numbers),\n   |permutations| will automatically call lex-permutations as a speed optimization."}, sorted-numbers? {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 23, :column 8, :author "Mark Engelberg", :line 292, :from "clojure.math.combinatorics", :end-line 292, :arglists (quote ([s])), :doc "Returns true iff s is a sequence of numbers in non-decreasing order"}, :private true, :name quantum.core.numeric.combinatorics/sorted-numbers?, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 292, :from "clojure.math.combinatorics", :end-line 292, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true iff s is a sequence of numbers in non-decreasing order"}, index-combinations {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 88, :column 8, :end-line 88, :end-column 26, :private true, :arglists (quote ([n cnt])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/index-combinations, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 26, :method-params ([n cnt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 88, :from "clojure.math.combinatorics", :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n cnt]))}, count-permutations {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 396, :column 7, :end-line 396, :end-column 25, :arglists (quote ([l])), :doc "Counts the number of distinct permutations of l", :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :name quantum.core.numeric.combinatorics/count-permutations, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 25, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 396, :from "clojure.math.combinatorics", :end-line 396, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l])), :doc "Counts the number of distinct permutations of l"}, vec-lex-permutations {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 270, :column 8, :end-line 270, :end-column 28, :private true, :arglists (quote ([v])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/vec-lex-permutations, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 28, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 270, :from "clojure.math.combinatorics", :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, list-index {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 18, :column 8, :author "Mark Engelberg", :line 689, :from "clojure.math.combinatorics", :end-line 689, :arglists (quote ([l item])), :doc "The opposite of nth, i.e., from an item in a list, find the n"}, :private true, :name quantum.core.numeric.combinatorics/list-index, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 18, :method-params ([l item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 689, :from "clojure.math.combinatorics", :end-line 689, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l item])), :doc "The opposite of nth, i.e., from an item in a list, find the n"}, combinations {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 185, :column 7, :end-line 185, :end-column 19, :arglists (quote ([items t])), :doc "All the unique ways of taking t different elements from items", :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :name quantum.core.numeric.combinatorics/combinations, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 19, :method-params ([items t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 185, :from "clojure.math.combinatorics", :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items t])), :doc "All the unique ways of taking t different elements from items"}, count-combinations-unmemoized {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 37, :column 8, :author "Mark Engelberg", :line 566, :from "clojure.math.combinatorics", :end-line 566, :arglists (quote ([items t])), :doc "We need an internal version that doesn't memoize each call to count-combinations-from-frequencies\n   so that we can memoize over a series of calls."}, :private true, :name quantum.core.numeric.combinatorics/count-combinations-unmemoized, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 37, :method-params ([items t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 566, :from "clojure.math.combinatorics", :end-line 566, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items t])), :doc "We need an internal version that doesn't memoize each call to count-combinations-from-frequencies\n   so that we can memoize over a series of calls."}, iter-perm {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 250, :column 8, :end-line 250, :end-column 17, :private true, :arglists (quote ([v])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/iter-perm, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 17, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 250, :from "clojure.math.combinatorics", :end-line 250, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, update {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 748, :column 8, :end-line 748, :end-column 14, :private true, :arglists (quote ([vec index f])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/update, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 14, :method-params ([vec index f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 748, :from "clojure.math.combinatorics", :end-line 748, :max-fixed-arity 3, :fn-var true, :arglists (quote ([vec index f]))}, next-distribution {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 127, :column 8, :end-line 127, :end-column 25, :private true, :arglists (quote ([m total distribution])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/next-distribution, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 25, :method-params ([m total distribution]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 127, :from "clojure.math.combinatorics", :end-line 127, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m total distribution]))}, index-remainder {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 23, :column 8, :author "Mark Engelberg", :line 423, :from "clojure.math.combinatorics", :end-line 423, :arglists (quote ([perm-numbers n])), :doc "Finds the index and remainder from the initial-perm-numbers."}, :private true, :name quantum.core.numeric.combinatorics/index-remainder, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 23, :method-params ([perm-numbers n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 423, :from "clojure.math.combinatorics", :end-line 423, :max-fixed-arity 2, :fn-var true, :arglists (quote ([perm-numbers n])), :doc "Finds the index and remainder from the initial-perm-numbers."}, distribute {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 110, :column 8, :end-line 110, :end-column 18, :private true, :arglists (quote ([m index total distribution already-distributed])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/distribute, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 18, :method-params ([m index total distribution already-distributed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 110, :from "clojure.math.combinatorics", :end-line 110, :max-fixed-arity 5, :fn-var true, :arglists (quote ([m index total distribution already-distributed]))}, count-combinations-from-frequencies {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 53, :column 18, :author "Mark Engelberg", :dynamic true, :line 548, :from "clojure.math.combinatorics", :end-line 548, :arglists (quote ([freqs t]))}, :private true, :name quantum.core.numeric.combinatorics/count-combinations-from-frequencies, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 53, :method-params ([freqs t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :dynamic true, :line 548, :from "clojure.math.combinatorics", :end-line 548, :max-fixed-arity 2, :fn-var true, :arglists (quote ([freqs t]))}, multi-perm {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 18, :column 8, :author "Mark Engelberg", :line 300, :from "clojure.math.combinatorics", :end-line 300, :arglists (quote ([l])), :doc "Handles the case when you want the permutations of a list with duplicate items."}, :private true, :name quantum.core.numeric.combinatorics/multi-perm, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 18, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 300, :from "clojure.math.combinatorics", :end-line 300, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l])), :doc "Handles the case when you want the permutations of a list with duplicate items."}, nth-permutation-distinct {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 32, :column 8, :author "Mark Engelberg", :line 363, :from "clojure.math.combinatorics", :contributors ["Alex Gunnarson"], :end-line 363, :arglists (quote ([l n])), :doc "Input should be a sorted sequential collection l of distinct items, \n   output is nth-permutation (0-based)"}, :private true, :name quantum.core.numeric.combinatorics/nth-permutation-distinct, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 32, :method-params ([l n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 363, :from "clojure.math.combinatorics", :contributors ["Alex Gunnarson"], :end-line 363, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l n])), :doc "Input should be a sorted sequential collection l of distinct items, \n   output is nth-permutation (0-based)"}, nth-subset {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 668, :column 7, :end-line 668, :end-column 17, :arglists (quote ([items n])), :author "Mark Engelberg", :from "clojure.math.combinatorics", :contributor ["Alex Gunnarson"]}, :name quantum.core.numeric.combinatorics/nth-subset, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 17, :method-params ([items n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 668, :contributor ["Alex Gunnarson"], :from "clojure.math.combinatorics", :end-line 668, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items n]))}, subsets {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 214, :column 19, :end-line 214, :end-column 26, :arglists (quote ([items])), :doc "All the subsets of items"}, :name quantum.core.numeric.combinatorics/subsets, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 26, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 13, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :doc "All the subsets of items"}, m6 {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 990, :column 8, :end-line 990, :end-column 10, :private true, :arglists (quote ([n m f c u v a b l r s])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/m6, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 10, :method-params ([n m f c u v a b l r s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 990, :from "clojure.math.combinatorics", :end-line 990, :max-fixed-arity 11, :fn-var true, :arglists (quote ([n m f c u v a b l r s]))}, multi-comb {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 18, :column 8, :author "Mark Engelberg", :line 170, :from "clojure.math.combinatorics", :end-line 170, :arglists (quote ([l t])), :doc "Handles the case when you want the combinations of a list with duplicate items."}, :private true, :name quantum.core.numeric.combinatorics/multi-comb, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 18, :method-params ([l t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 170, :from "clojure.math.combinatorics", :end-line 170, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l t])), :doc "Handles the case when you want the combinations of a list with duplicate items."}, multiset-partitions-M {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 11, :method-params ([multiset r s] [n m f c u v a b l r s]), :arglists ([multiset r s] [n m f c u v a b l r s]), :arglists-meta (nil nil)}, :column 8, :author "Mark Engelberg", :line 887, :from "clojure.math.combinatorics", :end-line 887, :arglists (quote ([multiset r s] [n m f c u v a b l r s]))}, :private true, :name quantum.core.numeric.combinatorics/multiset-partitions-M, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 11, :method-params ([multiset r s] [n m f c u v a b l r s]), :arglists ([multiset r s] [n m f c u v a b l r s]), :arglists-meta (nil nil)}, :method-params ([multiset r s] [n m f c u v a b l r s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 887, :from "clojure.math.combinatorics", :end-line 887, :max-fixed-arity 11, :fn-var true, :arglists ([multiset r s] [n m f c u v a b l r s])}, bounded-distributions {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 157, :column 8, :end-line 157, :end-column 29, :private true, :arglists (quote ([m t])), :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :private true, :name quantum.core.numeric.combinatorics/bounded-distributions, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 29, :method-params ([m t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 157, :from "clojure.math.combinatorics", :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m t]))}, plus {:name quantum.core.numeric.combinatorics/plus, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :line 85, :column 1, :end-line 85, :end-column 27, :private true, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 85, :column 23, :end-line 85, :end-column 27, :private true}}, bool->num {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 756, :column 8, :end-line 756, :end-column 17, :private true, :arglists (quote ([x]))}, :private true, :name quantum.core.numeric.combinatorics/bool->num, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 756, :end-line 756, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, mult {:name quantum.core.numeric.combinatorics/mult, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :line 86, :column 1, :end-line 86, :end-column 27, :private true, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 86, :column 23, :end-line 86, :end-column 27, :private true}}, unchunk {:protocol-inline nil, :meta {:private true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 15, :column 8, :author "Mark Engelberg", :line 200, :from "clojure.math.combinatorics", :end-line 200, :arglists (quote ([s])), :doc "Given a sequence that may have chunks, return a sequence that is 1-at-a-time\n   lazy with no chunks. Chunks are good for efficiency when the data items are\n   small, but when being processed via map, for example, a reference is kept to\n   every function result in the chunk until the entire chunk has been processed,\n   which increases the amount of memory in use that cannot be garbage\n   collected."}, :private true, :name quantum.core.numeric.combinatorics/unchunk, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 200, :from "clojure.math.combinatorics", :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Given a sequence that may have chunks, return a sequence that is 1-at-a-time\n   lazy with no chunks. Chunks are good for efficiency when the data items are\n   small, but when being processed via map, for example, a reference is kept to\n   every function result in the chunk until the entire chunk has been processed,\n   which increases the amount of memory in use that cannot be garbage\n   collected."}, permutation-index {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/numeric/combinatorics.cljc", :line 721, :column 7, :end-line 721, :end-column 24, :arglists (quote ([items])), :doc "Input must be a sortable collection of items.  Returns the n such that\n    (nth-permutation (sort items) n) is items.", :author "Mark Engelberg", :from "clojure.math.combinatorics"}, :name quantum.core.numeric.combinatorics/permutation-index, :variadic false, :file "src/cljc/quantum/core/numeric/combinatorics.cljc", :end-column 24, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :author "Mark Engelberg", :line 721, :from "clojure.math.combinatorics", :end-line 721, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :doc "Input must be a sortable collection of items.  Returns the n such that\n    (nth-permutation (sort items) n) is items."}}, :require-macros {fn quantum.core.function, quantum.core.function quantum.core.function, err quantum.core.error, quantum.core.error quantum.core.error, ns quantum.core.ns, quantum.core.ns quantum.core.ns, log quantum.core.log, quantum.core.log quantum.core.log}, :cljs.analyzer/constants {:seen #{t items :min ct :else neg? n not :max l integer? :assertion-error}, :order [:else integer? n not neg? l t items ct :assertion-error :min :max]}, :doc "Efficient, functional algorithms for generating lazy\n           sequences for common combinatorial functions. (See the source code \n           for a longer description.)"}