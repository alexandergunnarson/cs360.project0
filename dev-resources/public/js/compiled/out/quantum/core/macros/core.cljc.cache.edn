;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name quantum.core.macros.core, :imports nil, :requires nil, :uses nil, :defs {cljs-env? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/macros/core.cljc", :line 6, :column 8, :end-line 6, :end-column 17, :private true, :arglists (quote ([env])), :doc "Take the &env from a macro, and tell whether it is expanding into CLJS."}, :private true, :name quantum.core.macros.core/cljs-env?, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/macros/core.cljc", :end-column 17, :method-params ([env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([env])), :doc "Take the &env from a macro, and tell whether it is expanding into CLJS."}, if-cljs {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/macros/core.cljc", :line 20, :column 7, :end-line 20, :end-column 14, :arglists (quote ([env then else]))}, :name quantum.core.macros.core/if-cljs, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/macros/core.cljc", :end-column 14, :method-params ([env then else]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env then else]))}, hint-meta {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/macros/core.cljc", :line 45, :column 7, :end-line 45, :end-column 16, :arglists (quote ([sym hint]))}, :name quantum.core.macros.core/hint-meta, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/core/macros/core.cljc", :end-column 16, :method-params ([sym hint]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sym hint]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:ns :tag}, :order [:ns :tag]}, :doc "Macro-building helper functions."}