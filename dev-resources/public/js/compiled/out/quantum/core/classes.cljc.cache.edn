;; Analyzed by ClojureScript 1.7.170
{:name quantum.core.classes, :doc "Some useful macros, like de-repetitivizing protocol extensions.\n          Also some plumbing macros for |for| loops and the like.", :excludes #{name}, :use-macros {def- quantum.core.ns, whenf*n quantum.core.logic, doto->> quantum.core.function, try-times quantum.core.error, condfc quantum.core.logic, f*n quantum.core.function, coll-and quantum.core.logic, try+ quantum.core.error, fn-not quantum.core.logic, defcurried quantum.core.function, ifn quantum.core.logic, defalias quantum.core.ns, whencf*n quantum.core.logic, with-do quantum.core.function, <- quantum.core.function, whenc quantum.core.logic, throw-when quantum.core.error, ifp quantum.core.logic, assertf-> quantum.core.error, fn-or quantum.core.logic, if*n quantum.core.logic, fn-eq? quantum.core.logic, condf*n quantum.core.logic, ns-exclude quantum.core.ns, coll-or quantum.core.logic, assertf->> quantum.core.error, pr-attrs quantum.core.print, fn-and quantum.core.logic, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, throw+ quantum.core.error, source quantum.core.ns, condpc quantum.core.logic, fn= quantum.core.logic, assert quantum.core.error, throw-unless quantum.core.error, whenp quantum.core.logic, whenf quantum.core.logic, eq? quantum.core.logic, with-assert quantum.core.error, condf quantum.core.logic, fn->> quantum.core.function}, :require-macros {logic quantum.core.logic, pr quantum.core.print, log quantum.core.log, fn quantum.core.function, quantum.core.log quantum.core.log, ns quantum.core.ns, quantum.core.logic quantum.core.logic, err quantum.core.error, quantum.core.print quantum.core.print, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, quantum.core.function quantum.core.function}, :uses {AMap quantum.core.ns, postwalk clojure.walk, sorted-set+ quantum.core.data.set, juxtm quantum.core.function, vector+? quantum.core.data.vector, ! quantum.core.print, juxt-kv quantum.core.function, any? quantum.core.logic, camelcase quantum.core.collections.base, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, zip-reduce quantum.core.collections.base, Err quantum.core.error, ABool quantum.core.ns, ATreeMap quantum.core.ns, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, catvec quantum.core.data.vector, ASet quantum.core.ns, with-pr->> quantum.core.function, nnil? quantum.core.logic, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, subvec+ quantum.core.data.vector, AEditable quantum.core.ns, zeroid quantum.core.function, prewalk clojure.walk, AKey quantum.core.ns, name quantum.core.collections.base, splice-or quantum.core.logic, !* quantum.core.print, vector+ quantum.core.data.vector, with-msg->> quantum.core.function, comparators quantum.core.collections.base, compr quantum.core.function, AQueue quantum.core.ns, ns-qualify quantum.core.collections.base, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, default-zipper quantum.core.collections.base, ensure-set quantum.core.collections.base, AVec quantum.core.ns, ->ex quantum.core.error, ADecimal quantum.core.ns, Exception quantum.core.ns, ordered-map quantum.core.data.map, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, nempty? quantum.core.logic, ANum quantum.core.ns, ANil quantum.core.ns, map-entry quantum.core.data.map, unary quantum.core.function, withf->> quantum.core.function}, :requires {set quantum.core.data.set, clojure.core.rrb-vector clojure.core.rrb-vector, logic quantum.core.logic, pr quantum.core.print, log quantum.core.log, map quantum.core.data.map, cljs.core cljs.core, class-reg quantum.core.classes.reg, fn quantum.core.function, quantum.core.classes.reg quantum.core.classes.reg, vec quantum.core.data.vector, fast-zip.core fast-zip.core, quantum.core.log quantum.core.log, ns quantum.core.ns, quantum.core.data.vector quantum.core.data.vector, quantum.core.logic quantum.core.logic, cbase quantum.core.collections.base, err quantum.core.error, quantum.core.data.set quantum.core.data.set, quantum.core.print quantum.core.print, str clojure.string, zip fast-zip.core, clojure.string clojure.string, clojure.walk clojure.walk, quantum.core.error quantum.core.error, quantum.core.collections.base quantum.core.collections.base, quantum.core.ns quantum.core.ns, quantum.core.data.map quantum.core.data.map, core cljs.core, quantum.core.function quantum.core.function}, :imports nil}