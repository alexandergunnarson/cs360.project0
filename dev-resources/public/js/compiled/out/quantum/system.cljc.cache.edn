;; Analyzed by ClojureScript 1.7.170
{:use-macros {def- quantum.core.ns, with-resources quantum.core.resources, whenf*n quantum.core.logic, wait-until quantum.core.thread.async, doto->> quantum.core.function, try-times quantum.core.error, condfc quantum.core.logic, f*n quantum.core.function, coll-and quantum.core.logic, try+ quantum.core.error, fn-not quantum.core.logic, defcurried quantum.core.function, ifn quantum.core.logic, defalias quantum.core.ns, whencf*n quantum.core.logic, with-do quantum.core.function, <- quantum.core.function, whenc quantum.core.logic, throw-when quantum.core.error, ifp quantum.core.logic, assertf-> quantum.core.error, fn-or quantum.core.logic, if*n quantum.core.logic, fn-eq? quantum.core.logic, condf*n quantum.core.logic, ns-exclude quantum.core.ns, coll-or quantum.core.logic, assertf->> quantum.core.error, fn-and quantum.core.logic, defonce quantum.core.ns, fn-> quantum.core.function, rfn quantum.core.function, throw+ quantum.core.error, source quantum.core.ns, condpc quantum.core.logic, fn= quantum.core.logic, assert quantum.core.error, throw-unless quantum.core.error, whenp quantum.core.logic, whenf quantum.core.logic, eq? quantum.core.logic, with-assert quantum.core.error, condf quantum.core.logic, fn->> quantum.core.function}, :excludes #{defonce assert}, :name quantum.system, :imports nil, :requires {quantum.core.core quantum.core.core, res quantum.core.resources, clojure.core.rrb-vector clojure.core.rrb-vector, logic quantum.core.logic, log quantum.core.log, conn quantum.net.websocket, async quantum.core.thread.async, reagent.core reagent.core, rx reagent.core, cljs.core cljs.core, fn quantum.core.function, quantum.core.log quantum.core.log, quantum.core.resources quantum.core.resources, db quantum.db.datomic, ns quantum.core.ns, quantum.core.logic quantum.core.logic, err quantum.core.error, com.stuartsierra.component com.stuartsierra.component, debug quantum.core.util.debug, quantum.net.http quantum.net.http, dbc quantum.db.datomic.core, component com.stuartsierra.component, db-rx quantum.db.datomic.reactive.core, quantum.db.datomic quantum.db.datomic, quantum.db.datomic.reactive.core quantum.db.datomic.reactive.core, quantum.net.websocket quantum.net.websocket, quantum.core.thread.async quantum.core.thread.async, quantum.core.error quantum.core.error, quantum.db.datomic.core quantum.db.datomic.core, quantum.core.ns quantum.core.ns, core cljs.core, quantum.core.function quantum.core.function, quantum.core.util.debug quantum.core.util.debug, http quantum.net.http}, :uses {AMap quantum.core.ns, take!! quantum.core.thread.async, juxtm quantum.core.function, concur quantum.core.thread.async, juxt-kv quantum.core.function, any? quantum.core.logic, AArrList quantum.core.ns, firsta quantum.core.function, *fn quantum.core.function, Err quantum.core.error, ABool quantum.core.ns, ATreeMap quantum.core.ns, chan quantum.core.thread.async, js-println quantum.core.ns, IllegalArgumentException quantum.core.ns, >!! quantum.core.thread.async, ASet quantum.core.ns, with-pr->> quantum.core.function, nnil? quantum.core.logic, ALSeq quantum.core.ns, ARegex quantum.core.ns, with->> quantum.core.function, call quantum.core.function, AExactNum quantum.core.ns, put!! quantum.core.thread.async, AEditable quantum.core.ns, zeroid quantum.core.function, AKey quantum.core.ns, deref* quantum.core.core, splice-or quantum.core.logic, with-msg->> quantum.core.function, lens quantum.core.core, <!! quantum.core.thread.async, compr quantum.core.function, AQueue quantum.core.ns, peek!! quantum.core.thread.async, AError quantum.core.ns, fn-nil quantum.core.function, ADouble quantum.core.ns, withfs quantum.core.function, AVec quantum.core.ns, ->ex quantum.core.error, ADecimal quantum.core.ns, Exception quantum.core.ns, empty! quantum.core.thread.async, AInt quantum.core.ns, monoid quantum.core.function, ATransient quantum.core.ns, withf quantum.core.function, alts!! quantum.core.thread.async, nempty? quantum.core.logic, ANum quantum.core.ns, ANil quantum.core.ns, unary quantum.core.function, withf->> quantum.core.function, with-cleanup quantum.core.resources}, :defs {default-config {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/system.cljc", :line 14, :column 7, :end-line 14, :end-column 21, :arglists (quote ([& [{:as config, {:keys [routes key-password trust-password]} :server, {:keys [uri msg-handler], :as connection} :connection, {:keys [js-source-file]} :deployment, {:keys [schemas]} :db, {:keys [render root-id]} :frontend, {:as backend} :backend}]])), :doc "A decent default configuration for a web app.\n   TODO More default configs to follow.\n\n   @frontend-init : a frontend init function", :usage (quote (default-config {:server {:routes (*var router/routes), :key-password "password", :trust-password "password"}, :db {:schemas {:my/schema [:string :one {:unique? true}]}}, :connection {:msg-handler conn/ws-msg-handler}, :frontend {:init init-ui!, :render ui-render-fn, :root-id "app"}})), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [([{:as config, {:keys [routes key-password trust-password]} :server, {:keys [uri msg-handler], :as connection} :connection, {:keys [js-source-file]} :deployment, {:keys [schemas]} :db, {:keys [render root-id]} :frontend, {:as backend} :backend}])], :arglists ([& [{:as config, {:keys [routes key-password trust-password]} :server, {:keys [uri msg-handler], :as connection} :connection, {:keys [js-source-file]} :deployment, {:keys [schemas]} :db, {:keys [render root-id]} :frontend, {:as backend} :backend}]]), :arglists-meta (nil)}}, :name quantum.system/default-config, :variadic true, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/system.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [([{:as config, {:keys [routes key-password trust-password]} :server, {:keys [uri msg-handler], :as connection} :connection, {:keys [js-source-file]} :deployment, {:keys [schemas]} :db, {:keys [render root-id]} :frontend, {:as backend} :backend}])], :arglists ([& [{:as config, {:keys [routes key-password trust-password]} :server, {:keys [uri msg-handler], :as connection} :connection, {:keys [js-source-file]} :deployment, {:keys [schemas]} :db, {:keys [render root-id]} :frontend, {:as backend} :backend}]]), :arglists-meta (nil)}, :method-params [([{:as config, {:keys [routes key-password trust-password]} :server, {:keys [uri msg-handler], :as connection} :connection, {:keys [js-source-file]} :deployment, {:keys [schemas]} :db, {:keys [render root-id]} :frontend, {:as backend} :backend}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :usage (quote (default-config {:server {:routes (*var router/routes), :key-password "password", :trust-password "password"}, :db {:schemas {:my/schema [:string :one {:unique? true}]}}, :connection {:msg-handler conn/ws-msg-handler}, :frontend {:init init-ui!, :render ui-render-fn, :root-id "app"}})), :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists ([& [{:as config, {:keys [routes key-password trust-password]} :server, {:keys [uri msg-handler], :as connection} :connection, {:keys [js-source-file]} :deployment, {:keys [schemas]} :db, {:keys [render root-id]} :frontend, {:as backend} :backend}]]), :doc "A decent default configuration for a web app.\n   TODO More default configs to follow.\n\n   @frontend-init : a frontend init function"}, gen-system-creator {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/system.cljc", :line 96, :column 7, :end-line 96, :end-column 25, :arglists (quote ([system-kw config]))}, :name quantum.system/gen-system-creator, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/system.cljc", :end-column 25, :method-params ([system-kw config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([system-kw config]))}, gen-main {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/system.cljc", :line 122, :column 7, :end-line 122, :end-column 15, :arglists (quote ([config system-creator system sys-map])), :doc "Creates a standard |-main| function.\n   For Clojure, this is for JAR packaging.\n   For ClojureScript, this can be used e.g. with Figwheel's :main."}, :name quantum.system/gen-main, :variadic false, :file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/src/cljc/quantum/system.cljc", :end-column 15, :method-params ([config system-creator system sys-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 4, :fn-var true, :arglists (quote ([config system-creator system sys-map])), :doc "Creates a standard |-main| function.\n   For Clojure, this is for JAR packaging.\n   For ClojureScript, this can be used e.g. with Figwheel's :main."}}, :require-macros {res quantum.core.resources, logic quantum.core.logic, log quantum.core.log, async quantum.core.thread.async, fn quantum.core.function, quantum.core.log quantum.core.log, quantum.core.resources quantum.core.resources, ns quantum.core.ns, quantum.core.logic quantum.core.logic, err quantum.core.error, quantum.core.thread.async quantum.core.thread.async, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, quantum.core.function quantum.core.function}, :cljs.analyzer/constants {:seen #{:immutant :txr-alias :db.part/test :frontend :root-id :routes :script-src frontend-init :ephemeral :init :thread-ct :default-partition :db root-id :free :packer :warn :server :name :type :debug render-fn :init-schemas? :port :js-source-file :msg-handler :reactive? :levels :host :render :schemas :trust-password :edn :history-limit :deployment :key-password :threadpool :assertion-error :uri :create-if-not-present? :connection :backend :log :conn}, :order [:server :routes :key-password :trust-password :connection :uri :msg-handler :deployment :js-source-file :db :schemas :frontend :render :root-id :backend :immutant :init :log :threadpool :levels :warn :debug :host :packer :edn :ephemeral :txr-alias :default-partition :name :type :init-schemas? :port :create-if-not-present? :db.part/test :free :history-limit :reactive? :thread-ct :script-src :assertion-error render-fn root-id :conn frontend-init]}, :doc "A namespace for bootstrapping/streamlining system creation."}