;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, >!x datomic-cljs.macros}, :excludes #{}, :name datomic-cljs.http, :imports nil, :requires {async cljs.core.async, cljs.core.async cljs.core.async, reader cljs.reader, cljs.reader cljs.reader, str clojure.string, clojure.string clojure.string}, :uses {<! cljs.core.async}, :defs {node-context? {:name datomic-cljs.http/node-context?, :file "dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 8, :column 1, :end-line 8, :end-column 19, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 8, :column 6, :end-line 8, :end-column 19}}, urlencode-kvs {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 15, :column 8, :end-line 15, :end-column 21, :private true, :arglists (quote ([kvs]))}, :private true, :name datomic-cljs.http/urlencode-kvs, :variadic false, :file "dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :end-column 21, :method-params ([kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kvs]))}, urlencode-qs {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 23, :column 8, :end-line 23, :end-column 20, :private true, :arglists (quote ([qs-kvs]))}, :private true, :name datomic-cljs.http/urlencode-qs, :variadic false, :file "dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :end-column 20, :method-params ([qs-kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([qs-kvs]))}, parse-headers {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 26, :column 8, :end-line 26, :end-column 21, :private true, :arglists (quote ([header-str]))}, :private true, :name datomic-cljs.http/parse-headers, :variadic false, :file "dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :end-column 21, :method-params ([header-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([header-str]))}, browser-request {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 32, :column 8, :end-line 32, :end-column 23, :private true, :arglists (quote ([{:keys [method uri headers qs form], :or {method "GET", headers {}}, :as opts} callback]))}, :private true, :name datomic-cljs.http/browser-request, :variadic false, :file "dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :end-column 23, :method-params ([p__46208 callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [method uri headers qs form], :or {method "GET", headers {}}, :as opts} callback]))}, js-request {:name datomic-cljs.http/js-request, :file "dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 69, :column 1, :end-line 69, :end-column 26, :private true, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 69, :column 16, :end-line 69, :end-column 26, :private true}}, response-handler {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 79, :column 8, :end-line 79, :end-column 24, :private true, :arglists (quote ([c-resp edn?]))}, :private true, :name datomic-cljs.http/response-handler, :variadic false, :file "dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :end-column 24, :method-params ([c-resp edn?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c-resp edn?]))}, request {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 94, :column 7, :end-line 94, :end-column 14, :arglists (quote ([method uri] [method uri opts])), :doc "Make an async request to the given uri, returning a core.async\n   channel eventually containing either an error or a response map\n   containing the following:\n\n     :status, the HTTP status code;\n     :headers, a map of HTTP response headers;\n     :body, the response body;\n     :js-resp, the original JS response object.\n\n   opts is the same options map described in the Request docs:\n   https://github.com/mikeal/request#requestoptions-callback\n\n   Additionally, opts supports {:edn true} which sets the Accept\n   header to application/edn and parses the response body as edn\n   if the response content-type is application/edn.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([method uri] [method uri opts]), :arglists ([method uri] [method uri opts]), :arglists-meta (nil nil)}}, :name datomic-cljs.http/request, :variadic false, :file "dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([method uri] [method uri opts]), :arglists ([method uri] [method uri opts]), :arglists-meta (nil nil)}, :method-params ([method uri] [method uri opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 3, :fn-var true, :arglists ([method uri] [method uri opts]), :doc "Make an async request to the given uri, returning a core.async\n   channel eventually containing either an error or a response map\n   containing the following:\n\n     :status, the HTTP status code;\n     :headers, a map of HTTP response headers;\n     :body, the response body;\n     :js-resp, the original JS response object.\n\n   opts is the same options map described in the Request docs:\n   https://github.com/mikeal/request#requestoptions-callback\n\n   Additionally, opts supports {:edn true} which sets the Accept\n   header to application/edn and parses the response body as edn\n   if the response content-type is application/edn."}, body {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :line 128, :column 7, :end-line 128, :end-column 11, :arglists (quote ([c-resp])), :doc "Expects a response channel, and returns a channel that will\n   eventually contain either the response body (on successful status\n   code) or an error (if the request fails or an unsuccessful status\n   code was returned)."}, :name datomic-cljs.http/body, :variadic false, :file "dev-resources/public/js/compiled/out/datomic_cljs/http.cljs", :end-column 11, :method-params ([c-resp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c-resp])), :doc "Expects a response channel, and returns a channel that will\n   eventually contain either the response body (on successful status\n   code) or an error (if the request fails or an unsuccessful status\n   code was returned)."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, datomic-cljs.macros datomic-cljs.macros}, :cljs.analyzer/constants {:seen #{:else :method :recur :headers :status :qs :edn :content-type :uri :form :body :keywordize-keys :js-resp :accept}, :order [:method :uri :headers :qs :form :else :keywordize-keys :status :body :js-resp :content-type :edn :accept :recur]}, :doc nil}