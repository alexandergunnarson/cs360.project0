;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, defservantfn servant.macros}, :excludes #{}, :name servant.core, :imports nil, :requires {cljs.core.async cljs.core.async, worker servant.worker, servant.worker servant.worker}, :uses {timeout cljs.core.async, close! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {kill-servants {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/servant/core.cljs", :line 22, :column 7, :end-line 22, :end-column 20, :arglists (quote ([servant-channel worker-count])), :doc "Kills worker-count # of workers"}, :name servant.core/kill-servants, :variadic false, :file "dev-resources/public/js/compiled/out/servant/core.cljs", :end-column 20, :method-params ([servant-channel worker-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([servant-channel worker-count])), :doc "Kills worker-count # of workers"}, standard-message {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/servant/core.cljs", :line 32, :column 7, :end-line 32, :end-column 23, :arglists (quote ([worker fn-key args]))}, :name servant.core/standard-message, :variadic false, :file "dev-resources/public/js/compiled/out/servant/core.cljs", :end-column 23, :method-params ([worker fn-key args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists (quote ([worker fn-key args]))}, servant-thread {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/servant/core.cljs", :line 67, :column 7, :end-line 67, :end-column 21, :arglists (quote ([servant-channel post-message-fn f & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(servant-channel post-message-fn f args)], :arglists ([servant-channel post-message-fn f & args]), :arglists-meta (nil)}}, :name servant.core/servant-thread, :variadic true, :file "dev-resources/public/js/compiled/out/servant/core.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(servant-channel post-message-fn f args)], :arglists ([servant-channel post-message-fn f & args]), :arglists-meta (nil)}, :method-params [(servant-channel post-message-fn f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 3, :fn-var true, :arglists ([servant-channel post-message-fn f & args])}, servant-thread-with-key {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/servant/core.cljs", :line 54, :column 7, :end-line 54, :end-column 30, :arglists (quote ([servant-channel post-message-fn fn-key & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(servant-channel post-message-fn fn-key args)], :arglists ([servant-channel post-message-fn fn-key & args]), :arglists-meta (nil)}}, :name servant.core/servant-thread-with-key, :variadic true, :file "dev-resources/public/js/compiled/out/servant/core.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(servant-channel post-message-fn fn-key args)], :arglists ([servant-channel post-message-fn fn-key & args]), :arglists-meta (nil)}, :method-params [(servant-channel post-message-fn fn-key args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 3, :fn-var true, :arglists ([servant-channel post-message-fn fn-key & args])}, not-webworker? {:name servant.core/not-webworker?, :file "dev-resources/public/js/compiled/out/servant/core.cljs", :line 11, :column 1, :end-line 11, :end-column 20, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/servant/core.cljs", :line 11, :column 6, :end-line 11, :end-column 20}}, array-buffer-message-standard-reply {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/servant/core.cljs", :line 43, :column 7, :end-line 43, :end-column 42, :arglists (quote ([worker fn-key args])), :doc "Post message by transferring context of the arraybuffers.\n  The channel should be fed data like [[arg1 arg2] [arraybuffer1 arraybuffer2]].\n  Tells the worker to return normal data"}, :name servant.core/array-buffer-message-standard-reply, :variadic false, :file "dev-resources/public/js/compiled/out/servant/core.cljs", :end-column 42, :method-params ([worker fn-key args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([worker fn-key args])), :doc "Post message by transferring context of the arraybuffers.\n  The channel should be fed data like [[arg1 arg2] [arraybuffer1 arraybuffer2]].\n  Tells the worker to return normal data"}, spawn-servants {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/servant/core.cljs", :line 13, :column 7, :end-line 13, :end-column 21, :arglists (quote ([worker-count worker-script])), :doc "Returns a channel that lists available workers"}, :name servant.core/spawn-servants, :variadic false, :file "dev-resources/public/js/compiled/out/servant/core.cljs", :end-column 21, :method-params ([worker-count worker-script]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([worker-count worker-script])), :doc "Returns a channel that lists available workers"}, webworker? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/servant/core.cljs", :line 8, :column 7, :end-line 8, :end-column 17, :arglists (quote ([]))}, :name servant.core/webworker?, :variadic false, :file "dev-resources/public/js/compiled/out/servant/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, f->key {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/servant/core.cljs", :line 29, :column 7, :end-line 29, :end-column 13, :arglists (quote ([f]))}, :name servant.core/f->key, :variadic false, :file "dev-resources/public/js/compiled/out/servant/core.cljs", :end-column 13, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, array-buffer-message {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/byu/CS 360/Project0/dev-resources/public/js/compiled/out/servant/core.cljs", :line 35, :column 7, :end-line 35, :end-column 27, :arglists (quote ([worker fn-key args])), :doc "Post message by transferring context of the arraybuffers.\n  The channel should be fed data like [[normal args] [arraybuffer1 arraybuffer2]].\n  Tells the worker to expect to return an arraybuffer"}, :name servant.core/array-buffer-message, :variadic false, :file "dev-resources/public/js/compiled/out/servant/core.cljs", :end-column 27, :method-params ([worker fn-key args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([worker fn-key args])), :doc "Post message by transferring context of the arraybuffers.\n  The channel should be fed data like [[normal args] [arraybuffer1 arraybuffer2]].\n  Tells the worker to expect to return an arraybuffer"}}, :require-macros {m cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros, servant.macros servant.macros}, :cljs.analyzer/constants {:seen #{:else :recur}, :order [:recur :else]}, :doc nil}